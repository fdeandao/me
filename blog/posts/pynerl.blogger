
tras unas horas de codear, tengo la primera version de pynerl, un modulo en erlang que permite ejecutar python y obtener los resultados en erlang.<br/><br/>mas facil si lo explica xzibit.<br/><br/><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_XkKIWh0VZYk/S_NPEOgqfqI/AAAAAAAAHSI/sm0ftO0QOIw/s1600/Image.jpg"><img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 213px;" src="http://4.bp.blogspot.com/_XkKIWh0VZYk/S_NPEOgqfqI/AAAAAAAAHSI/sm0ftO0QOIw/s320/Image.jpg" alt="" id="BLOGGER_PHOTO_ID_5472804906218454690" border="0"/></a><br/><br/>el proyecto esta hosteado en github aca:<br/><br/><a href="http://github.com/marianoguerra/pynerl">http://github.com/marianoguerra/pynerl</a><br/><br/>un ejemplo:<br/><br/><div class="highlight"><pre><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">eval</span><span class="p">(</span><span class="s">"t = 1"</span><span class="p">,</span> <span class="s">"t"</span><span class="p">).</span><br/><span class="mi">1</span><br/><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">eval</span><span class="p">(</span><span class="s">"t = 1 * 2"</span><span class="p">,</span> <span class="s">"t"</span><span class="p">).</span><br/><span class="mi">2</span><br/><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">eval</span><span class="p">(</span><span class="s">"import time;t = time.time()"</span><span class="p">,</span> <span class="s">"t"</span><span class="p">).</span>           <br/><span class="mi">1274236802</span><span class="p">.</span><span class="mi">877999</span><br/><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">eval</span><span class="p">(</span><span class="s">"import random;t = random.random()"</span><span class="p">,</span> <span class="s">"t"</span><span class="p">).</span>        <br/><span class="mi">0</span><span class="p">.</span><span class="mi">45102117275294684</span><br/><span class="mi">5</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">eval</span><span class="p">(</span><span class="s">"t = print('hello erlang or python')"</span><span class="p">,</span> <span class="s">"t"</span><span class="p">).</span>                                <br/><span class="n">hello</span> <span class="n">erlang</span> <span class="ow">or</span> <span class="n">python</span><br/><span class="n">none</span><br/><span class="mi">6</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="s">"time"</span><span class="p">,</span> <span class="s">"time"</span><span class="p">,</span> <span class="p">[]).</span>                       <br/><span class="mi">1274236859</span><span class="p">.</span><span class="mi">510859</span><br/><span class="mi">7</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="s">"random"</span><span class="p">,</span> <span class="s">"random"</span><span class="p">,</span> <span class="p">[]).</span><br/><span class="mi">0</span><span class="p">.</span><span class="mi">9623136682858975</span><br/><span class="mi">8</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">eval</span><span class="p">(</span><span class="s">"t = True"</span><span class="p">,</span> <span class="s">"t"</span><span class="p">).</span>                          <br/><span class="n">true</span><br/><span class="mi">9</span><span class="o">&gt;</span> <span class="nn">pynerl</span><span class="p">:</span><span class="n">eval</span><span class="p">(</span><span class="s">"t = 2.3"</span><span class="p">,</span> <span class="s">"t"</span><span class="p">).</span><br/><span class="mi">2</span><span class="p">.</span><span class="mi">3</span><br/></pre></div><br/><br/>como ves las dos funciones principales son eval y call, que hacen lo que esperarias, eval evalua una expresion y devuelve el valor de la variable que pases como segundo parametro. call llama a la funcion dentro del modulo pasandole los parametros del tercer argumento y devuelve el resultado.<br/><br/>El estado actual es alpha, el mapeo de tipos funciona solo para los tipos basicos y el paso de parametros en call todavia no esta implementado (simplemente porque lo empece hace 2 horas :P).<br/><br/>Como es la primera vez que programo python y erlang internamente seguro que estoy leakeando por todos lados, se va a resolver cuando lea un poco mas.
<div style="clear: both;"/>
