
me cree una cuenta en project euler para aprender bien erlang y lisp, voy a intentar resolver todos los problemas en esos lenguajes y en python como lenguaje conocido para comparar los resultados. Obviamente esto es algo que voy a abandonar, la pregunta es cuando :D<br/><br/>No necesariamente voy a usar la misma forma, porque a veces no se puede o no la se, por ahora con tal que ande esta todo bien.<br/><br/>aca va el resultado del primer problema<br/><br/>python <br/><br/><div class="highlight"><pre><span class="c"># Add all the natural numbers below one thousand that are multiples of 3 or 5.</span><br/><br/><span class="c"># If we list all the natural numbers below 10 that are multiples of 3 or 5,</span><br/><span class="c"># we get 3, 5, 6 and 9. The sum of these multiples is 23.</span><br/><span class="c"># Find the sum of all the multiples of 3 or 5 below 1000.</span><br/><br/><span class="k">def</span> <span class="nf">calculate</span><span class="p">():</span><br/><span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mf">1000</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mf">3</span> <span class="o">==</span> <span class="mf">0</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">%</span> <span class="mf">5</span> <span class="o">==</span> <span class="mf">0</span><span class="p">)</span><br/><br/><span class="k">def</span> <span class="nf">print_result</span><span class="p">():</span><br/><span class="k">print</span> <span class="n">calculate</span><span class="p">()</span><br/><br/><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span><br/><span class="n">print_result</span><span class="p">()</span><br/></pre></div><br/><br/>en erlang<br/><br/><div class="highlight"><pre><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ej_001</span><span class="p">).</span><br/><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">calculate</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">print_result</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span><br/><br/><span class="nf">calculate</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">sum</span><span class="p">([</span><span class="nv">X</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">),</span> <span class="nv">X</span> <span class="ow">rem</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">orelse</span> <span class="nv">X</span> <span class="ow">rem</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]).</span><br/><br/><span class="nf">print_result</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"</span><span class="si">~w~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="n">calculate</span><span class="p">()]).</span><br/></pre></div><br/><br/>en lisp<br/><br/><div class="highlight"><pre><span class="p">(</span><span class="nb">defun</span> <span class="nv">multiple-of-3-or-5</span> <span class="p">(</span><span class="nv">value</span><span class="p">)</span><br/><span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">rem</span> <span class="nv">value</span> <span class="mi">3</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span><br/><span class="p">(</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">rem</span> <span class="nv">value</span> <span class="mi">5</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span><br/><span class="p">)</span><br/><br/><span class="p">(</span><span class="nb">defun</span> <span class="nv">calculate-helper</span> <span class="p">(</span><span class="nv">value</span> <span class="nv">accum</span> <span class="nv">limit</span><span class="p">)</span><br/><span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">=</span> <span class="nv">value</span> <span class="nv">limit</span><span class="p">)</span><br/><span class="nv">accum</span><span class="p">)</span><br/><span class="p">((</span><span class="nv">multiple-of-3-or-5</span> <span class="nv">value</span><span class="p">)</span><br/><span class="p">(</span><span class="nv">calculate-helper</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">value</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">accum</span> <span class="nv">value</span><span class="p">)</span> <span class="nv">limit</span><span class="p">))</span><br/><span class="p">(</span><span class="no">T</span><br/><span class="p">(</span><span class="nv">calculate-helper</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">value</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">accum</span> <span class="nv">limit</span><span class="p">))</span><br/><span class="p">)</span><br/><span class="p">)</span><br/><br/><span class="p">(</span><span class="nb">defun</span> <span class="nv">calculate</span> <span class="p">()</span> <span class="p">(</span><span class="nv">calculate-helper</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1000</span><span class="p">))</span><br/><br/><span class="p">(</span><span class="nb">defun</span> <span class="nv">print-result</span> <span class="p">()</span><br/><span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nv">calculate</span><span class="p">)))</span><br/><br/><span class="p">(</span><span class="nv">print-result</span><span class="p">)</span><br/></pre></div>
<div style="clear: both;"/>
