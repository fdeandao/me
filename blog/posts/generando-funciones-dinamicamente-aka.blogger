
Este desafio estuvo bueno, alguien en la lista de emesene dijo que para hacer la API de dbus exponiendo los eventos del protocolo (que tienen numero de argumentos variables) necesitaba generar funciones con cantidad de argumentos variables pero que la funcion tenga ese numero fijo, esto significa que si tengo que generar una funcion que recibe 4 argumentos tiene que ser:<br/><br/>def fun(arg0, arg1, arg2, arg3): pass<br/><br/>y no<br/><br/>def fun(*args): pass<br/><br/>ya que la API de dbus usa inspect para determinar el numero de argumentos posicionales<br/><br/>me tomo varias horas sacarlo, buscaba y buscaba y cada vez iba mas a bajo nivel. Hasta que llegue al mas bajo nivel que se puede llegar... generar bytecodes :)<br/><br/>y bue, pelee con eso un buen rato ya que si bien alguna vez jugue haciendo maquinas virtuales de juguete esta era la primera vez contra una en serio.<br/><br/>el resultado es el siguiente:<br/><br/><br/><div class="highlight"><pre><span class="k">import</span> <span class="nn">dis</span><br/><span class="k">import</span> <span class="nn">types</span><br/><br/><span class="k">def</span> <span class="nf">gen</span><span class="p">(</span><span class="n">num</span><span class="p">):</span><br/><span class="n">op</span> <span class="o">=</span> <span class="n">dis</span><span class="o">.</span><span class="n">opmap</span><span class="o">.</span><span class="n">__getitem__</span><br/><span class="n">ops</span> <span class="o">=</span> <span class="p">[</span><span class="n">op</span><span class="p">(</span><span class="s">'LOAD_GLOBAL'</span><span class="p">),</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">]</span><br/><br/><span class="k">for</span> <span class="n">argnum</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span><br/><span class="n">ops</span><span class="o">.</span><span class="kp">append</span><span class="p">(</span><span class="n">op</span><span class="p">(</span><span class="s">'LOAD_FAST'</span><span class="p">))</span><br/><span class="n">ops</span><span class="o">.</span><span class="kp">append</span><span class="p">(</span><span class="n">argnum</span><span class="p">)</span><br/><span class="n">ops</span><span class="o">.</span><span class="kp">append</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span><br/><br/><span class="n">ops</span><span class="o">.</span><span class="kp">append</span><span class="p">(</span><span class="n">op</span><span class="p">(</span><span class="s">'CALL_FUNCTION'</span><span class="p">))</span><br/><span class="n">ops</span><span class="o">.</span><span class="kp">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><br/><span class="n">ops</span><span class="o">.</span><span class="kp">append</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span><br/><span class="n">ops</span><span class="o">.</span><span class="kp">append</span><span class="p">(</span><span class="n">op</span><span class="p">(</span><span class="s">'RETURN_VALUE'</span><span class="p">))</span><br/><br/><span class="n">code_str</span> <span class="o">=</span> <span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ops</span><span class="p">)</span><br/><span class="k">return</span> <span class="n">code_str</span><br/><br/><span class="k">def</span> <span class="nf">gen_code</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">global_vars</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'func'</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="s">'magic.py'</span><span class="p">):</span><br/><span class="n">code</span> <span class="o">=</span> <span class="n">gen</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><br/><span class="n">varnames</span> <span class="o">=</span> <span class="p">[</span><span class="s">'arg'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">)]</span><br/><span class="n">names</span> <span class="o">=</span> <span class="n">global_vars</span> <span class="o">+</span> <span class="n">varnames</span><br/><br/><span class="n">names</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">names</span><span class="p">)</span><br/><span class="n">varnames</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">varnames</span><span class="p">)</span><br/><br/><span class="k">return</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="p">(),</span> <span class="n">names</span><span class="p">,</span> <span class="n">varnames</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="s">''</span><span class="p">)</span><br/><br/><span class="k">def</span> <span class="nf">gen_fun</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span><br/><span class="n">code</span> <span class="o">=</span> <span class="n">gen_code</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="p">[</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">],</span> <span class="n">name</span><span class="p">)</span><br/><span class="k">return</span> <span class="n">types</span><span class="o">.</span><span class="n">FunctionType</span><span class="p">(</span><span class="n">code</span><span class="p">,{</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">:</span> <span class="n">func</span><span class="p">})</span><br/><br/><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span><br/><span class="k">def</span> <span class="nf">printer</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span><br/><span class="k">print</span> <span class="n">args</span><br/><br/><span class="n">f4</span> <span class="o">=</span> <span class="n">gen_fun</span><span class="p">(</span><span class="mf">4</span><span class="p">,</span> <span class="s">'f4'</span><span class="p">,</span> <span class="n">printer</span><span class="p">)</span><br/><span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">f4</span><span class="o">.</span><span class="n">func_code</span><span class="p">)</span><br/><span class="n">f4</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span><span class="mf">2</span><span class="p">,</span><span class="mf">3</span><span class="p">,</span><span class="mf">4</span><span class="p">)</span><br/><br/><span class="n">f1</span> <span class="o">=</span> <span class="n">gen_fun</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="s">'f1'</span><span class="p">,</span> <span class="n">printer</span><span class="p">)</span><br/><span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">f1</span><span class="o">.</span><span class="n">func_code</span><span class="p">)</span><br/><span class="n">f1</span><span class="p">(</span><span class="s">'only one arg'</span><span class="p">)</span><br/><br/><span class="k">try</span><span class="p">:</span><br/><span class="n">f1</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">2</span><span class="p">)</span><br/><span class="k">except</span> <span class="ne">TypeError</span><span class="p">:</span><br/><span class="k">print</span> <span class="s">'ok, ok, only one argument'</span><br/></pre></div><br/><br/>lo que hace es generar una funcion que recibe N parametros y que lo unico que hace es llamar a otra funcion pasandole esos parametros, lo cual seria algo como:<br/><br/>def fun1(*args): print args<br/><br/>def fun_que_recibe_4_parametros(a,b,c,d): fun1(a,b,c,d)<br/><br/>con lo que si escribimos nuestra funcion en fun1 y creamos las funciones que reciben los distintos parametros con un for tenemos lo que necesitamos :)<br/><br/>la salida de la ejecusion de lo de arriba es:<br/><pre><br/>1           0 LOAD_GLOBAL              0 (printer)<br/>          3 LOAD_FAST                0 (arg0)<br/>          6 LOAD_FAST                1 (arg1)<br/>          9 LOAD_FAST                2 (arg2)<br/>         12 LOAD_FAST                3 (arg3)<br/>         15 CALL_FUNCTION            4<br/>         18 RETURN_VALUE<br/><br/>(1, 2, 3, 4)<br/><br/>1           0 LOAD_GLOBAL              0 (printer)<br/>          3 LOAD_FAST                0 (arg0)<br/>          6 CALL_FUNCTION            1<br/>          9 RETURN_VALUE<br/><br/>('only one arg',)<br/>ok, ok, only one argument<br/></pre><br/><br/>fuentes de inspiracion:<br/><br/><a href="http://pyref.infogami.com/type-code">http://pyref.infogami.com/type-code</a><br/><a href="http://docs.python.org/library/dis.html">http://docs.python.org/library/dis.html</a><br/><a href="http://docs.python.org/library/types">http://docs.python.org/library/types</a><br/><a href="http://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy">http://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy</a> (la parte de callable types)
<div style="clear: both;"/>
