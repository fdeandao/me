
alguien me paso el tip de que el broadcast de MPI es una operacion colectiva y que no tiene que ir en el rank 0 si no que todos lo tienen que ejecutar ya que tiene el receive implicito, asi que aca los 2 programas corregidos (los que no imprimian los valores de los procesos que no fueran el master).<br/><br/>plus un arreglo en la declaracion de la estructura en el segundo programa.<br/><br/><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span><br/><span class="cp">#include &lt;mpi.h&gt;</span><br/><br/><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span><br/><span class="kt">int</span> <span class="n">rank</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span><br/><span class="n">MPI_Status</span> <span class="n">status</span><span class="p">;</span><br/><br/><span class="n">MPI_Init</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">);</span>   <span class="c">/* starts MPI */</span><br/><span class="n">MPI_Comm_rank</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rank</span><span class="p">);</span>        <span class="c">/* get current process id */</span><br/><span class="n">MPI_Comm_size</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>        <span class="c">/* get number of processes */</span><br/><br/><span class="k">do</span> <span class="p">{</span><br/><span class="k">if</span><span class="p">(</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"give me a value: "</span><span class="p">);</span><br/><span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">);</span><br/><span class="p">}</span><br/><br/><span class="n">MPI_Bcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_INT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"process %d received %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span><br/><span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><br/><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"negative value, closing</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span><br/><br/><span class="n">MPI_Finalize</span><span class="p">();</span><br/><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><br/><span class="p">}</span><br/></pre></div><br/><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span><br/><span class="cp">#include &lt;mpi.h&gt;</span><br/><br/><span class="n">MPI_Datatype</span> <span class="n">IntDoubleType</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><br/><br/><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span><br/><span class="kt">int</span> <span class="n">value_int</span><span class="p">;</span><br/><span class="kt">double</span> <span class="n">value_double</span><span class="p">;</span><br/><span class="p">}</span><span class="n">IntDouble</span><span class="p">;</span><br/><br/><span class="n">MPI_Datatype</span> <span class="nf">create_int_double_type</span><span class="p">()</span> <span class="p">{</span><br/><span class="k">if</span><span class="p">(</span><span class="n">IntDoubleType</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br/><span class="n">MPI_Aint</span> <span class="n">array_of_displacements</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><br/><span class="n">MPI_Datatype</span> <span class="n">array_of_types</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><br/><span class="kt">int</span> <span class="n">array_of_blocklengths</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><br/><br/><span class="n">array_of_displacements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><br/><span class="n">array_of_types</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">MPI_INT</span><span class="p">;</span><br/><span class="n">array_of_blocklengths</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span><br/><br/><span class="n">array_of_displacements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span><br/><span class="n">array_of_types</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">MPI_DOUBLE</span><span class="p">;</span><br/><span class="n">array_of_blocklengths</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">);</span><br/><br/><span class="n">MPI_Type_struct</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">array_of_blocklengths</span><span class="p">,</span> <span class="n">array_of_displacements</span><span class="p">,</span><br/><span class="n">array_of_types</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">IntDoubleType</span><span class="p">);</span><br/><span class="n">MPI_Type_commit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">IntDoubleType</span><span class="p">);</span><br/><br/><span class="p">}</span><br/><br/><span class="k">return</span> <span class="n">IntDoubleType</span><span class="p">;</span><br/><span class="p">}</span><br/><br/><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span><br/><span class="kt">int</span> <span class="n">rank</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">value_int</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span><br/><span class="kt">double</span> <span class="n">value_double</span><span class="p">;</span><br/><span class="n">IntDouble</span> <span class="n">value</span><span class="p">;</span><br/><span class="n">MPI_Status</span> <span class="n">status</span><span class="p">;</span><br/><br/><span class="n">MPI_Init</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">);</span>   <span class="c">/* starts MPI */</span><br/><span class="n">MPI_Comm_rank</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rank</span><span class="p">);</span>        <span class="c">/* get current process id */</span><br/><span class="n">MPI_Comm_size</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>        <span class="c">/* get number of processes */</span><br/><span class="n">create_int_double_type</span><span class="p">();</span><br/><br/><span class="k">do</span> <span class="p">{</span><br/><span class="k">if</span><span class="p">(</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"give me an int value: "</span><span class="p">);</span><br/><span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value_int</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"give me a double value: "</span><span class="p">);</span><br/><span class="n">scanf</span><span class="p">(</span><span class="s">"%lf"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value_double</span><span class="p">);</span><br/><span class="n">value</span><span class="p">.</span><span class="n">value_int</span> <span class="o">=</span> <span class="n">value_int</span><span class="p">;</span><br/><span class="n">value</span><span class="p">.</span><span class="n">value_double</span> <span class="o">=</span> <span class="n">value_double</span><span class="p">;</span><br/><span class="p">}</span><br/><br/><span class="n">MPI_Bcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">IntDoubleType</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"process %d received %d %lf</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">value</span><span class="p">.</span><span class="n">value_int</span><span class="p">,</span><br/><span class="n">value</span><span class="p">.</span><span class="n">value_double</span><span class="p">);</span><br/><span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><br/><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">value_int</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"negative value, closing</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span><br/><br/><span class="n">MPI_Finalize</span><span class="p">();</span><br/><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><br/><span class="p">}</span><br/></pre></div>
<div style="clear: both;"/>
