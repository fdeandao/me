
<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_XkKIWh0VZYk/ShCvcKmKV2I/AAAAAAAAGJs/i6LTxtOp_bc/s1600-h/repiola-2.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 307px; height: 320px;" src="http://1.bp.blogspot.com/_XkKIWh0VZYk/ShCvcKmKV2I/AAAAAAAAGJs/i6LTxtOp_bc/s320/repiola-2.png" alt="" id="BLOGGER_PHOTO_ID_5336958456849651554" border="0"/></a><br/><br/>Disclaimer: este post es para documentar lo que estoy haciendo y no olvidarme la proxima vez que mire el codigo, si no entendes nada no hay drama :)<br/><br/>Este proyecto lo empece el sabado 16 de mayo hablando con un amigo de que a pesar de tener java en el celular no teniamos ninguna app copada para usar en esos momentos en los que no tenes nada que hacer (esperar a alguien, viaje eterno en colectivo etc etc).<br/><br/>y se me ocurrio juntar algunas cosas que me gustan para hacer la primera version de "repiola", que todavia esta un poco en alpha pero que va queriendo.<br/><br/>la cosa es asi:<br/><br/>* tenemos una "maquina virtual" que intepreta opcodes de 32 bits, la maquina tiene 8 registros de uso general de 32 bits r1, r2..., r8 y dos registros especiales x, y<br/>* la maquina tiene una "pantalla" de nxm pixels en donde puede escribir pixels RGB<br/>* las operaciones basicas que la maquina puede interpretar son:<br/>- aritmeticas (+, -, *, /, %)<br/>- binarias (&amp;, |, ^, !)<br/>- de movimiento (ir n pixels arriba, abajo, izquiera, derecha, setear x a n, setear y an n)<br/>- de pintado (pintar el pixel en (x, y) al valor n, almacenar el color en el pixel (x, y) en el registro r)<br/>- de comparacion (==, !=, &lt;, &gt;, &lt;= , &gt;=)<br/>- utiles (generar un entero aleatorio y guardarlo en el registro r, nop, salto incondicinal)<br/><br/>pero como no todos escribimos en hexadecimal dise√±e un lenguaje muy simple lo mas corto posible (para poder escribirlo en el cel sin morir en el intento) y que fuera bastante mnemonico para poder recordarlo mientras uno esta en el medio de la nada, el formato es muy parecido a assembler, pero como el compilador del lenguaje esta separado de la maquina virtual se pueden generar otros lenguajes que generen los opcodes.<br/><br/>el formato general del lenguaje es algo asi:<br/><br/>&lt;operacion&gt; &lt;valor&gt;<br/>&lt;operacion&gt; &lt;registro&gt; &lt;registro&gt;|&lt;valor&gt;<br/>&lt;operacion&gt; &lt;registro&gt; &lt;registro&gt;|&lt;valor&gt; &lt;etiqueta&gt;<br/><br/>ejemplos:<br/><br/>asignar al registro r1 el valor 10<br/><br/>= r1 10<br/><br/>asignar al registro r2 el valor de r1<br/><br/>= r1 r2<br/><br/>pintar el color 10 en la posicion actual de x, y<br/><br/>p 10<br/><br/>pintar el color almacenado en r1 en x, y<br/><br/>p r1<br/><br/>mover x a la derecha 10 pixels<br/><br/>r 10<br/><br/>mover y abajo la cantidad de pixels almacenado en r3<br/><br/>d r3<br/><br/>setear x a 5<br/><br/>x 5<br/><br/>setear y al valor almacenado en r4<br/><br/>y r4<br/><br/>mover y hacia arriba 3 pixels<br/><br/>u 3<br/><br/>almacenar en el registro 5 el color del pixel en x, y<br/><br/>s r5<br/><br/>guardar un valor aleatorio en el registro 6<br/><br/>? r6<br/><br/>definir una etiqueta llamada "aca"<br/><br/>: aca<br/><br/>saltar a la etiqueta llamada "aca"<br/><br/>j aca<br/><br/>algunas operaciones aritmeticas (supongo que ya entendieron el formato :D)<br/><br/>+ r1 10<br/>- r2 r1<br/>* r3 10<br/>/ r4 r3<br/>% r5 2<br/><br/>algunas operaciones binarias<br/><br/>&amp; r1 r2<br/>| r2 1<br/>^ r3 r2<br/>! r4<br/><br/>operaciones de comparacion<br/><br/>si r1 es igual a 1337 entonces saltar a la etiqueta "aca"<br/><br/>e r1 1337 aca<br/><br/>el operador distinto<br/><br/>n r1 1337 aca<br/><br/>si r1 es mayor a r2 saltar a "alla"<br/><br/>gt r1 r2 alla<br/><br/>con mayor o igual<br/><br/>ge r1 r2 alla<br/><br/>menor y menor o igual<br/><br/>lt r1 r2 alla<br/>le r1 r2 alla<br/><br/>muchos ejemplos? bueno, pero tengan en cuanta que cubri todos los operadores del lenguaje, los otros dos son "#" para comentario y "." para nooperation.<br/><br/>actualmente estoy trabajando en una interfaz swing para probarlo y cuando todo ande bien hago la gui para celulares (no da para pasar un jar al celular para probar y teclear ahi :D)<br/><br/>sobre el formato de los opcodes a grandes razgos es asi:<br/><br/>voy a representar cada byte de instriccion con una i, byte de numeros con una n, byte de pixel con una p, bytes sin usar con una x, bytes de identificador de registro fuente con una s, de destino con una d.<br/><br/>los operadores de movimiento que reciben un numero tienen el siguiente formato:<br/><br/>ixnn<br/><br/>los de movimiento que reciben un registro fuente<br/><br/>isxx<br/><br/>los operadores aritmeticos, binarios y de asignacion con registro fuente y un numero (el numero se almacena en el registro fuente):<br/><br/>isnn<br/><br/>los operadores aritmeticos, binarios y de asignacion con registro fuente y un registro destino (el valor de destino se almacena en fuente):<br/><br/>isdx<br/><br/>para el caso de poner un pixel de color en la posicion actual el formato es<br/><br/>ippx<br/><br/>para las operaciones de comparacion con numeros (llll es una direccion de 32 bits a la posicion a la que hay que saltar):<br/><br/>isnn llll<br/><br/>para operaciones de comparacion entre registros<br/><br/>isdx llll<br/><br/>el estado actual (domingo 17 de mayo es que anda todo menos la traduccion de etiquetas a direcciones de memoria) en modo interprete se puede ejecutar todo, pero si se compila los saltos no van a funcionar, sera para otra vez, por ahora con el interprete ando bien porque puedo hacer ejecucion paso a paso y debugear.
<div style="clear: both;"/>
