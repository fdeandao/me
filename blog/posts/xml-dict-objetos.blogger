
<p>En este ejemplo se muestra como convertir un string a una estructura de diccionarios y listas anidadas usando expat, tambien se proveen dos clases que permiten manipular el resultado como si fueran objetos. <span id="line-4" class="anchor"/></p> <span id="line-5" class="anchor"/>primero el codigo<br/><br/><div class="highlight"><pre><span style="color: rgb(0, 112, 32); font-weight: bold;">import</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">xml.parsers.expat</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">class</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">XmlParser</span>(<span style="color: rgb(0, 112, 32);">object</span>):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''a class that parses a xml string an generates a nested </span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    dict/list structure</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    '''</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__init__</span>(<span style="color: rgb(0, 112, 32);">self</span>, text):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''constructor'''</span><br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>parser <span style="color: rgb(102, 102, 102);">=</span> xml<span style="color: rgb(102, 102, 102);">.</span>parsers<span style="color: rgb(102, 102, 102);">.</span>expat<span style="color: rgb(102, 102, 102);">.</span>ParserCreate()<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>parser<span style="color: rgb(102, 102, 102);">.</span>buffer_text <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">True</span><br/><br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>result <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">None</span><br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>stack <span style="color: rgb(102, 102, 102);">=</span> []<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">None</span><br/><br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>parser<span style="color: rgb(102, 102, 102);">.</span>StartElementHandler <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>start_element<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>parser<span style="color: rgb(102, 102, 102);">.</span>EndElementHandler <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>end_element<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>parser<span style="color: rgb(102, 102, 102);">.</span>CharacterDataHandler <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>char_data<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>parser<span style="color: rgb(102, 102, 102);">.</span>Parse(text)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">start_element</span>(<span style="color: rgb(0, 112, 32);">self</span>, name, attrs):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''Start xml element handler'''</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current <span style="color: rgb(102, 102, 102);">!=</span> <span style="color: rgb(0, 112, 32);">None</span>:<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>stack<span style="color: rgb(102, 102, 102);">.</span>append(<span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current)<br/><br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current <span style="color: rgb(102, 102, 102);">=</span> {}<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">for</span> (key, value) <span style="color: rgb(0, 112, 32); font-weight: bold;">in</span> attrs<span style="color: rgb(102, 102, 102);">.</span>iteritems():<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current[<span style="color: rgb(0, 112, 32);">str</span>(key)] <span style="color: rgb(102, 102, 102);">=</span> value<br/><br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current[<span style="color: rgb(64, 112, 160);">'tag'</span>] <span style="color: rgb(102, 102, 102);">=</span> name<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current[<span style="color: rgb(64, 112, 160);">'childs'</span>] <span style="color: rgb(102, 102, 102);">=</span> []<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">end_element</span>(<span style="color: rgb(0, 112, 32);">self</span>, name):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''End xml element handler'''</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> <span style="color: rgb(0, 112, 32);">len</span>(<span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>stack):<br/>           current <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>stack<span style="color: rgb(102, 102, 102);">.</span>pop()<br/>           current[<span style="color: rgb(64, 112, 160);">'childs'</span>]<span style="color: rgb(102, 102, 102);">.</span>append(<span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current)<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current <span style="color: rgb(102, 102, 102);">=</span> current<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">else</span>:<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>result <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">char_data</span>(<span style="color: rgb(0, 112, 32);">self</span>, data):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''Char xml element handler.</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">        buffer_text is enabled, so this is the whole text element'''</span><br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>current[<span style="color: rgb(64, 112, 160);">'childs'</span>]<span style="color: rgb(102, 102, 102);">.</span>append(data)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">class</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">DictObj</span>(<span style="color: rgb(0, 112, 32);">dict</span>):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''a class that allows to access a dict as an object</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    '''</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__init__</span>(<span style="color: rgb(0, 112, 32);">self</span>, kwargs):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''constructor'''</span><br/><span style="color: rgb(0, 112, 32);">dict</span><span style="color: rgb(102, 102, 102);">.</span>__init__(<span style="color: rgb(0, 112, 32);">self</span>, kwargs)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__getattribute__</span>(<span style="color: rgb(0, 112, 32);">self</span>, name):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> name <span style="color: rgb(0, 112, 32); font-weight: bold;">in</span> <span style="color: rgb(0, 112, 32);">self</span>:<br/>           obj <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">self</span>[name]<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> <span style="color: rgb(0, 112, 32);">type</span>(obj) <span style="color: rgb(102, 102, 102);">==</span> <span style="color: rgb(0, 112, 32);">dict</span>:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> DictObj(obj)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">elif</span> <span style="color: rgb(0, 112, 32);">type</span>(obj) <span style="color: rgb(102, 102, 102);">==</span> <span style="color: rgb(0, 112, 32);">list</span>:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> ListObj(obj)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> obj<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">else</span>:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> <span style="color: rgb(0, 112, 32);">None</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">class</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">ListObj</span>(<span style="color: rgb(0, 112, 32);">list</span>):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''a class that allows to access dicts inside a list as objects</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    '''</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__init__</span>(<span style="color: rgb(0, 112, 32);">self</span>, args):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''constructor'''</span><br/><span style="color: rgb(0, 112, 32);">list</span><span style="color: rgb(102, 102, 102);">.</span>__init__(<span style="color: rgb(0, 112, 32);">self</span>, args)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__getitem__</span>(<span style="color: rgb(0, 112, 32);">self</span>, index):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> index <span style="color: rgb(102, 102, 102);">&gt;</span> <span style="color: rgb(0, 112, 32);">len</span>(<span style="color: rgb(0, 112, 32);">self</span>):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">raise</span> <span style="color: rgb(0, 112, 32);">IndexError</span>(<span style="color: rgb(64, 112, 160);">'list index out of range'</span>)<br/><br/>       obj <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(0, 112, 32);">list</span><span style="color: rgb(102, 102, 102);">.</span>__getitem__(<span style="color: rgb(0, 112, 32);">self</span>, index)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> <span style="color: rgb(0, 112, 32);">type</span>(obj) <span style="color: rgb(102, 102, 102);">==</span> <span style="color: rgb(0, 112, 32);">dict</span>:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> DictObj(obj)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">elif</span> <span style="color: rgb(0, 112, 32);">type</span>(obj) <span style="color: rgb(102, 102, 102);">==</span> <span style="color: rgb(0, 112, 32);">list</span>:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> ListObj(obj)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> obj<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__iter__</span>(<span style="color: rgb(0, 112, 32);">self</span>):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''iterate over the list'''</span><br/><br/>       count <span style="color: rgb(102, 102, 102);">=</span> <span style="color: rgb(64, 160, 112);">0</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">while</span> count <span style="color: rgb(102, 102, 102);">&lt;</span> <span style="color: rgb(0, 112, 32);">len</span>(<span style="color: rgb(0, 112, 32);">self</span>):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">yield</span> <span style="color: rgb(0, 112, 32);">self</span>[count]<br/>           count <span style="color: rgb(102, 102, 102);">+=</span> <span style="color: rgb(64, 160, 112);">1</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">raw_string</span>(dct_):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''return a string containing just the string parts removing all the </span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    xml stuff'''</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">helper</span>(dct):<br/>       result <span style="color: rgb(102, 102, 102);">=</span> []<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">for</span> child <span style="color: rgb(0, 112, 32); font-weight: bold;">in</span> dct<span style="color: rgb(102, 102, 102);">.</span>childs:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> <span style="color: rgb(0, 112, 32);">type</span>(child) <span style="color: rgb(102, 102, 102);">==</span> <span style="color: rgb(0, 112, 32);">str</span> <span style="color: rgb(0, 112, 32); font-weight: bold;">or</span> <span style="color: rgb(0, 112, 32);">type</span>(child) <span style="color: rgb(102, 102, 102);">==</span> <span style="color: rgb(0, 112, 32);">unicode</span>:<br/>               result<span style="color: rgb(102, 102, 102);">.</span>append(<span style="color: rgb(0, 112, 32);">str</span>(child))<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">else</span>:<br/>               result <span style="color: rgb(102, 102, 102);">=</span> result <span style="color: rgb(102, 102, 102);">+</span> helper(child)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> result<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> <span style="color: rgb(64, 112, 160);">''</span><span style="color: rgb(102, 102, 102);">.</span>join(helper(dct_))<br/></pre></div><br/><br/><br/>Simplemente creamos un objeto de tipo XmlParser pasandole el string y obtenemos el resultado parseado en la variable result. Si no queremos andar preguntado si las llaves existen antes de accederlas para evitar excepciones podemos usar la clase DictObj que nos permite acceder a las llaves como si fueran atributos, las variables que no existan como llaves contendran None. Aca va un ejemplo en la consola interactiva<br/><br/><pre><br/>&gt;&gt;&gt; import XmlParser<br/>&gt;&gt;&gt; p = XmlParser.XmlParser('<span><a href="http://www.blogger.com/google.com">go<s>o</s>gle</a> <i>test</i> <img src="http://www.blogger.com/foo.png" alt="foo"/><u>!</u><s>!</s></span>')<br/>&gt;&gt;&gt; r = p.result<br/>&gt;&gt;&gt; d = XmlParser.DictObj(r)<br/>&gt;&gt;&gt; d<br/>{'childs': [{'childs': [u'go', {'childs': [u'o'], 'tag': u's'}, u'gle'], 'href': u'google.com', 'tag': u'a'}, u' ', {'childs': [u'test'], 'tag': u'i'}, u' ', {'childs': [], 'src': u'foo.png', 'alt': u'foo', 'tag': u'img'}, u' ', {'childs': [u'!'], 'tag': u'u'}, {'childs': [u'!'], 'tag': u's'}], 'tag': u'span'}<br/>&gt;&gt;&gt; d.childs<br/>[{'childs': [u'go', {'childs': [u'o'], 'tag': u's'}, u'gle'], 'href': u'google.com', 'tag': u'a'}, u' ', {'childs': [u'test'], 'tag': u'i'}, u' ', {'childs': [], 'src': u'foo.png', 'alt': u'foo', 'tag': u'img'}, u' ', {'childs': [u'!'], 'tag': u'u'}, {'childs': [u'!'], 'tag': u's'}]<br/>&gt;&gt;&gt; d.childs[0]<br/>{'childs': [u'go', {'childs': [u'o'], 'tag': u's'}, u'gle'], 'href': u'google.com', 'tag': u'a'}<br/>&gt;&gt;&gt; d.childs[0].tag<br/>u'a'<br/>&gt;&gt;&gt; d.childs[0].childs[0]<br/>u'go'<br/>&gt;&gt;&gt; d.childs[0].childs[1].tag<br/>u's'<br/></pre>
<div style="clear: both;"/>
