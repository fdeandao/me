
<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://bp0.blogger.com/_XkKIWh0VZYk/R4JKaXJf5gI/AAAAAAAADCc/d3TGGYumqOY/s1600-h/tetris_atari.jpg"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://bp0.blogger.com/_XkKIWh0VZYk/R4JKaXJf5gI/AAAAAAAADCc/d3TGGYumqOY/s400/tetris_atari.jpg" alt="" id="BLOGGER_PHOTO_ID_5152762740416177666" border="0"/></a><br/>"Bigger is just something you have to live with in Java. Growth is a fact of life. Java is like a variant of the game of Tetris in which none of the pieces can fill gaps created by the other pieces, so all you can do is pile them up endlessly."<br/><br/>"if you begin with the assumption that you need to shrink your code base, you will eventually be <em>forced</em> to conclude that you cannot continue to use Java. Conversely, if you begin with the assumption that you must use Java, then you will eventually be <em>forced</em> to conclude that you will have millions of lines of code."<br/><br/>"But you should take anything a "Java programmer" tells you with a hefty grain of salt, because an "X programmer", for any value of X, is a weak player. You have to cross-train to be a decent athlete these days. Programmers need to be fluent in multiple languages with fundamentally different "character" before they can make truly informed design decisions.<br/><br/>Recently I've been finding that Java is an especially bad value for X.  If you absolutely <em>must</em> hire an X programmer, make sure it's Y."<br/><br/>"The second difficulty with the IDE perspective is that Java-style IDEs intrinsically create a circular problem. The circularity stems from the nature of programming languages: the "game piece" shapes are determined by the language's static type system. Java's game pieces don't permit code elimination because Java's static type system doesn't have any compression facilities â€“ no macros, no lambdas, no declarative data structures, no templates, nothing that would permit the removal of the copy-and-paste duplication patterns that Java programmers think of as "inevitable boilerplate", but which are in fact easily factored out in dynamic languages."<br/><br/><br/>http://steve-yegge.blogspot.com/2007/12/codes-worst-enemy.html
<div style="clear: both;"/>
