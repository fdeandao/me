
La diferencia es que en python lo hice con generadores ya que queda mas prolijo, hasta donde se no hay generadores en los otros.<br/><br/>Python<br/><br/><div class="highlight"><pre><span class="c"># Each new term in the Fibonacci sequence is generated by adding the previous</span><br/><span class="c"># two terms. By starting with 1 and 2, the first 10 terms will be:</span><br/><span class="c"># 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</span><br/><span class="c"># Find the sum of all the even-valued terms in the sequence which do not</span><br/><span class="c"># exceed four million.</span><br/><br/><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">():</span><br/><span class="n">one</span> <span class="o">=</span> <span class="mf">0</span><br/><span class="n">two</span> <span class="o">=</span> <span class="mf">1</span><br/><span class="n">step</span> <span class="o">=</span> <span class="mf">1</span><br/><br/><span class="k">while</span> <span class="bp">True</span><span class="p">:</span><br/><span class="n">one</span><span class="p">,</span> <span class="n">two</span> <span class="o">=</span> <span class="n">two</span><span class="p">,</span> <span class="n">one</span> <span class="o">+</span> <span class="n">two</span><br/><span class="k">yield</span> <span class="n">two</span><br/><span class="n">step</span> <span class="o">+=</span> <span class="mf">1</span><br/><br/><span class="k">def</span> <span class="nf">calculate</span><span class="p">(</span><span class="n">limit</span><span class="p">):</span><br/><span class="n">result</span> <span class="o">=</span> <span class="mf">0</span><br/><span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">fibonacci</span><span class="p">():</span><br/><span class="k">if</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="n">limit</span><span class="p">:</span><br/><span class="k">break</span><br/><br/><span class="k">if</span> <span class="n">value</span> <span class="o">%</span> <span class="mf">2</span> <span class="o">==</span> <span class="mf">0</span><span class="p">:</span><br/><span class="n">result</span> <span class="o">+=</span> <span class="n">value</span><br/><br/><span class="k">return</span> <span class="n">result</span><br/><br/><span class="k">def</span> <span class="nf">print_result</span><span class="p">():</span><br/><span class="k">print</span> <span class="n">calculate</span><span class="p">(</span><span class="mf">4000000</span><span class="p">)</span><br/><br/><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span><br/><span class="n">print_result</span><span class="p">()</span><br/></pre></div><br/><br/><br/>Erlang<br/><br/><div class="highlight"><pre><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ej_002</span><span class="p">).</span><br/><span class="p">-</span><span class="ni">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">).</span><br/><span class="c">%-export([calculate/1, print_result/0]).</span><br/><br/><span class="nf">fibonacci_step</span><span class="p">(</span><span class="nv">First</span><span class="p">,</span> <span class="nv">Second</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="nv">Second</span><span class="p">,</span> <span class="nv">First</span> <span class="o">+</span> <span class="nv">Second</span><span class="p">}.</span><br/><br/><span class="nf">calculate</span><span class="p">(</span><span class="nv">First</span><span class="p">,</span> <span class="nv">Second</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">calculate</span><span class="p">(</span><span class="nv">First</span><span class="p">,</span> <span class="nv">Second</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><br/><br/><span class="nf">calculate</span><span class="p">(_</span><span class="nv">First</span><span class="p">,</span> <span class="nv">Second</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">,</span> <span class="nv">Accum</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Second</span> <span class="o">&gt;</span> <span class="nv">Limit</span> <span class="o">-&gt;</span> <span class="nv">Accum</span><span class="p">;</span><br/><span class="nf">calculate</span><span class="p">(</span><span class="nv">First</span><span class="p">,</span> <span class="nv">Second</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">,</span> <span class="nv">Accum</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="p">{</span><span class="nv">NewFirst</span><span class="p">,</span> <span class="nv">NewSecond</span><span class="p">}</span> <span class="o">=</span> <span class="n">fibonacci_step</span><span class="p">(</span><span class="nv">First</span><span class="p">,</span> <span class="nv">Second</span><span class="p">),</span><br/><br/><span class="k">case</span> <span class="nv">NewSecond</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="k">of</span><br/><span class="mi">0</span> <span class="o">-&gt;</span> <span class="nv">NewAccum</span> <span class="o">=</span> <span class="nv">Accum</span> <span class="o">+</span> <span class="nv">NewSecond</span><span class="p">;</span><br/><span class="mi">1</span> <span class="o">-&gt;</span> <span class="nv">NewAccum</span> <span class="o">=</span> <span class="nv">Accum</span><br/><span class="k">end</span><span class="p">,</span><br/><br/><span class="n">calculate</span><span class="p">(</span><span class="nv">NewFirst</span><span class="p">,</span> <span class="nv">NewSecond</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">,</span> <span class="nv">NewAccum</span><span class="p">).</span><br/><br/><span class="nf">calculate</span><span class="p">(</span><span class="nv">Limit</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">calculate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">).</span><br/><br/><span class="nf">print_result</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"</span><span class="si">~w~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="n">calculate</span><span class="p">(</span><span class="mi">4000000</span><span class="p">)]).</span><br/></pre></div><br/><br/>Lisp (note que los par√©ntesis dejan de molestar y si lo tabulas de una forma particular se parece mucho a python :D)<br/><br/><div class="highlight"><pre><span class="p">(</span><span class="nb">defun</span> <span class="nv">fibonacci-step</span> <span class="p">(</span><span class="nv">one</span> <span class="nv">two</span><span class="p">)</span><br/><span class="p">(</span><span class="nb">list</span> <span class="nv">two</span>  <span class="p">(</span><span class="nb">+</span> <span class="nv">one</span> <span class="nv">two</span><span class="p">)))</span><br/><br/><span class="p">(</span><span class="nb">defun</span> <span class="nv">calculate-helper</span> <span class="p">(</span><span class="nv">one</span> <span class="nv">two</span> <span class="nv">limit</span> <span class="nv">accum</span><span class="p">)</span><br/><span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">&gt;</span> <span class="nv">two</span> <span class="nv">limit</span><span class="p">)</span> <span class="nv">accum</span><span class="p">)</span><br/><span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">result</span> <span class="p">(</span><span class="nv">fibonacci-step</span> <span class="nv">one</span> <span class="nv">two</span><span class="p">)))</span><br/><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">new-one</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">result</span><span class="p">))</span><br/><span class="p">(</span><span class="nv">new-two</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">result</span><span class="p">)))</span><br/><br/><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">rem</span> <span class="nv">new-two</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span><br/><span class="p">(</span><span class="nv">calculate-helper</span> <span class="nv">new-one</span> <span class="nv">new-two</span> <span class="nv">limit</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">accum</span> <span class="nv">new-two</span><span class="p">))</span><br/><span class="p">(</span><span class="nv">calculate-helper</span> <span class="nv">new-one</span> <span class="nv">new-two</span> <span class="nv">limit</span> <span class="nv">accum</span><span class="p">)))))))</span><br/><br/><span class="p">(</span><span class="nb">defun</span> <span class="nv">calculate</span> <span class="p">(</span><span class="nv">limit</span><span class="p">)</span> <span class="p">(</span><span class="nv">calculate-helper</span> <span class="mi">0</span> <span class="mi">1</span> <span class="nv">limit</span> <span class="mi">0</span><span class="p">))</span><br/><br/><span class="p">(</span><span class="nb">defun</span> <span class="nv">print-result</span> <span class="p">()</span> <span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nv">calculate</span> <span class="mi">4000000</span><span class="p">)))</span><br/></pre></div>
<div style="clear: both;"/>
