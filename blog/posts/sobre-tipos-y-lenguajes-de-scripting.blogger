
me llego un call for papers para este workshop <a href="http://www.cs.purdue.edu/homes/wrigstad/stop09/STOP/About.html">http://www.cs.purdue.edu/homes/wrigstad/stop09/STOP/About.html</a><br/><br/>y se me ocurrió lo que se puede hacer con lenguajes de scripting para los "locos por los tipos"<br/><br/>acá va el código y después la explicación<br/><br/>ensure.py: provee los decoradores para asegurar tipos en parámetros y valor de retorno<br/><div class="highlight"><pre><span class="k">import</span> <span class="nn">functools</span><br/><br/><span class="n">ensure_types</span> <span class="o">=</span> <span class="bp">True</span><br/><br/><span class="k">def</span> <span class="nf">args_types</span><span class="p">(</span><span class="o">*</span><span class="n">args_types</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs_types</span><span class="p">):</span><br/><span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">function</span><span class="p">):</span><br/><span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span><br/><span class="k">def</span> <span class="nf">replacement</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><br/><span class="k">for</span> <span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="n">arg_type</span><span class="p">))</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">args_types</span><span class="p">)):</span><br/><span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="o">!=</span> <span class="n">arg_type</span><span class="p">:</span><br/><span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">'Invalid type for arg '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="o">+</span><br/><span class="s">' expected '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">arg_type</span><span class="p">)</span> <span class="o">+</span> <span class="s">' got '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">arg</span><span class="p">)))</span><br/><br/><span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">ktype</span> <span class="ow">in</span> <span class="n">kwargs_types</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span><br/><span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span><br/><span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">kwargs</span><span class="p">[</span><span class="n">name</span><span class="p">])</span> <span class="o">!=</span> <span class="n">ktype</span><span class="p">:</span><br/><span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">'Invalid type for karg "'</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span><br/><span class="s">'" expected '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">ktype</span><span class="p">)</span> <span class="o">+</span> <span class="s">' got '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">kwargs</span><span class="p">[</span><span class="n">name</span><span class="p">])))</span><br/><br/><span class="k">return</span> <span class="n">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><br/><br/><span class="k">if</span> <span class="n">ensure_types</span><span class="p">:</span><br/><span class="n">replacement</span><span class="o">.</span><span class="n">_is_wrapped</span> <span class="o">=</span> <span class="bp">True</span><br/><span class="k">return</span> <span class="n">replacement</span><br/><span class="k">else</span><span class="p">:</span><br/><span class="n">function</span><span class="o">.</span><span class="n">_is_wrapped</span> <span class="o">=</span> <span class="bp">False</span><br/><span class="k">return</span> <span class="n">function</span><br/><br/><span class="k">return</span> <span class="n">wrapper</span><br/><br/><span class="k">def</span> <span class="nf">return_type</span><span class="p">(</span><span class="n">return_type</span><span class="p">):</span><br/><span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">function</span><span class="p">):</span><br/><span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span><br/><span class="k">def</span> <span class="nf">replacement</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><br/><span class="n">result</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><br/><br/><span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">!=</span> <span class="n">return_type</span><span class="p">:</span><br/><span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">'Invalid return type expected '</span> <span class="o">+</span><br/><span class="nb">str</span><span class="p">(</span><span class="n">return_type</span><span class="p">)</span> <span class="o">+</span> <span class="s">' got '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">)))</span><br/><br/><span class="k">return</span> <span class="n">result</span><br/><br/><span class="k">if</span> <span class="n">ensure_types</span><span class="p">:</span><br/><span class="n">replacement</span><span class="o">.</span><span class="n">_is_wrapped</span> <span class="o">=</span> <span class="bp">True</span><br/><span class="k">return</span> <span class="n">replacement</span><br/><span class="k">else</span><span class="p">:</span><br/><span class="n">function</span><span class="o">.</span><span class="n">_is_wrapped</span> <span class="o">=</span> <span class="bp">False</span><br/><span class="k">return</span> <span class="n">function</span><br/><br/><span class="k">return</span> <span class="n">wrapper</span><br/></pre></div><br/><br/>test_ensure.py: prueba la implementación<br/><div class="highlight"><pre><span class="k">import</span> <span class="nn">ensure</span><br/><span class="c"># if ensure.ensure_types is set to False then the decorators</span><br/><span class="c"># return the same functions and don't make the type checking</span><br/><span class="c"># that an be done when development finished and you want to</span><br/><span class="c"># deliver the code (it remove the checks and make the code faster)</span><br/><span class="c"># ensure.ensure_types = False</span><br/><br/><span class="nd">@ensure</span><span class="o">.</span><span class="n">args_types</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="n">sure</span><span class="o">=</span><span class="nb">bool</span><span class="p">,</span> <span class="n">price</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span><br/><br/><span class="k">def</span> <span class="nf">do_something</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">sure</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">price</span><span class="o">=</span><span class="mf">10.0</span><span class="p">):</span><br/><br/><span class="k">print</span> <span class="n">number</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">sure</span><span class="p">,</span> <span class="n">price</span><br/><br/><span class="nd">@ensure</span><span class="o">.</span><span class="n">return_type</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span><br/><br/><span class="k">def</span> <span class="nf">return_param</span><span class="p">(</span><span class="n">param</span><span class="p">):</span><br/><span class="k">return</span> <span class="n">param</span><br/><br/><span class="k">if</span> <span class="n">do_something</span><span class="o">.</span><span class="n">_is_wrapped</span><span class="p">:</span><br/><br/><span class="k">print</span> <span class="s">'do_something contains type checks'</span><br/><span class="k">else</span><span class="p">:</span><br/><span class="k">print</span> <span class="s">'do_something doesn</span><span class="se">\'</span><span class="s">t contains type checks'</span><br/><br/><span class="k">if</span> <span class="n">return_param</span><span class="o">.</span><span class="n">_is_wrapped</span><span class="p">:</span><br/><br/><span class="k">print</span> <span class="s">'return_param contains type checks'</span><br/><span class="k">else</span><span class="p">:</span><br/><span class="k">print</span> <span class="s">'return_param doesn</span><span class="se">\'</span><span class="s">t contains type checks'</span><br/><br/><span class="k">print</span> <span class="n">do_something</span><span class="o">.</span><span class="n">__name__</span><br/><br/><span class="k">print</span><br/><br/><span class="n">do_something</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="s">"spongebob"</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span><br/><span class="n">do_something</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="s">"spongebob"</span><span class="p">,</span> <span class="n">sure</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><br/><br/><span class="n">do_something</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="s">"spongebob"</span><span class="p">,</span> <span class="n">sure</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">price</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span><br/><br/><span class="c"># Fail</span><br/><span class="k">try</span><span class="p">:</span><br/><span class="n">do_something</span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="s">"spongebob"</span><span class="p">)</span><br/><span class="k">except</span> <span class="ne">ValueError</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span><br/><br/><span class="k">print</span> <span class="n">error</span><br/><br/><span class="k">try</span><span class="p">:</span><br/><span class="n">do_something</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">12.3</span><span class="p">)</span><br/><br/><span class="k">except</span> <span class="ne">ValueError</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span><br/><span class="k">print</span> <span class="n">error</span><br/><br/><span class="k">try</span><span class="p">:</span><br/><br/><span class="n">do_something</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="s">"patricio"</span><span class="p">,</span> <span class="mf">10</span><span class="p">)</span><br/><span class="k">except</span> <span class="ne">ValueError</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span><br/><br/><span class="k">print</span> <span class="n">error</span><br/><br/><span class="k">try</span><span class="p">:</span><br/><span class="n">do_something</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="s">"patricio"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mf">10</span><span class="p">)</span><br/><br/><span class="k">except</span> <span class="ne">ValueError</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span><br/><span class="k">print</span> <span class="n">error</span><br/><br/><span class="k">try</span><span class="p">:</span><br/><br/><span class="n">do_something</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="s">"patricio"</span><span class="p">,</span> <span class="n">sure</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span><br/><span class="k">except</span> <span class="ne">ValueError</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span><br/><br/><span class="k">print</span> <span class="n">error</span><br/><br/><span class="k">try</span><span class="p">:</span><br/><span class="n">do_something</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="s">"patricio"</span><span class="p">,</span> <span class="n">sure</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">price</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span><br/><br/><span class="k">except</span> <span class="ne">ValueError</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span><br/><span class="k">print</span> <span class="n">error</span><br/><br/><span class="k">print</span> <span class="s">'returned'</span><span class="p">,</span> <span class="n">return_param</span><span class="p">(</span><span class="mf">5</span><span class="p">)</span><br/><br/><span class="k">try</span><span class="p">:</span><br/><span class="k">print</span> <span class="s">'returned'</span><span class="p">,</span> <span class="n">return_param</span><span class="p">(</span><span class="s">"hi!"</span><span class="p">)</span><br/><span class="k">except</span> <span class="ne">ValueError</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span><br/><br/><span class="k">print</span> <span class="n">error</span><br/></pre></div><br/><br/>la salida corriendo con ensure.ensure_types = True es:<br/><br/>do_something contains type checks<br/>return_param contains type checks<br/>do_something<br/><br/>1 spongebob True 10.0<br/>1 spongebob False 10.0<br/>1 spongebob False 2.0<br/>Invalid type for arg 0 expected &lt;type 'int'&gt; got &lt;type 'bool'&gt;<br/>Invalid type for arg 1 expected &lt;type 'str'&gt; got &lt;type 'float'&gt;<br/>Invalid type for arg 2 expected &lt;type 'bool'&gt; got &lt;type 'int'&gt;<br/>Invalid type for arg 3 expected &lt;type 'float'&gt; got &lt;type 'int'&gt;<br/>Invalid type for karg "sure" expected &lt;type 'bool'&gt; got &lt;type 'NoneType'&gt;<br/>Invalid type for karg "price" expected &lt;type 'float'&gt; got &lt;type 'NoneType'&gt;<br/>returned 5<br/>returned Invalid return type expected &lt;type 'int'&gt; got &lt;type 'str'&gt;<br/><br/>la salida corriendo con ensure.ensure_types = False es:<br/><br/>do_something doesn't contains type checks<br/>return_param doesn't contains type checks<br/>do_something<br/><br/>1 spongebob True 10.0<br/>1 spongebob False 10.0<br/>1 spongebob False 2.0<br/>False spongebob False 10.0<br/>1 12.3 False 10.0<br/>1 patricio 10 10.0<br/>1 patricio True 10<br/>1 patricio None 10.0<br/>1 patricio True None<br/>returned 5<br/>returned hi!<br/><br/>Conclusión:<br/><br/>con esta librería se le podría dar a los que lo quieran (no se si yo lo usaría mucho) una forma de checkear en tiempo de ejecución los tipos de datos recibidos como parámetros y los tipos devueltos por las funciones que decidan decorar.<br/>Estas decoraciones sirven también como método para dar hints a los programadores sobre de que tipos son los valores que se reciben en la función y puede ser usado por IDEs para deducir los tipos y mostrar errores/warnings en el cuerpo del código.<br/>Un aspecto positivo es que se puede deshabilitar el decorado seteando ensure.ensure_types = False. En tal caso no se incurre en ningún overhead en tiempo de ejecución, esto podría ser usado luego del ciclo de desarrollo y prueba, donde no se detecto ninguna "violacion de contrato" y se entrega al usuario final el código con los checks en tiempo de ejecución deshabilitados para incrementar la performance de la aplicación.<br/><br/>obviamente se pueden hacer mejoras en el decorador de los parámetros, pero para ser un modulo de  50 lineas y escrito en menos de una hora, esta bastante bien :)
<div style="clear: both;"/>
