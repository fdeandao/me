
el titulo suena sacrilegioso pero es algo asi.<br/><br/>ultimamente estaba pensando como agregarle una construccion mas poderosa que los "records" de erlang a mi lenguaje (http://marianoguerra.com.ar/efene) y me parece que llegue a una version que me cierra:<br/><br/><div class="highlight"><pre><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">person</span><span class="p">).</span><br/><span class="p">-</span><span class="ni">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">).</span><br/><br/><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">person</span><span class="p">,</span> <span class="p">{</span><span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">mail</span><span class="p">}).</span><br/><br/><span class="nf">person</span><span class="p">(</span><span class="nv">Firstname</span><span class="p">,</span> <span class="nv">Lastname</span><span class="p">,</span> <span class="nv">Mail</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nv">Person</span> <span class="o">=</span> <span class="nl">#person</span><span class="p">{</span><span class="n">firstname</span><span class="o">=</span><span class="nv">Firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="o">=</span><span class="nv">Lastname</span><span class="p">,</span> <span class="n">mail</span><span class="o">=</span><span class="nv">Mail</span><span class="p">},</span><br/><span class="n">wrapper</span><span class="p">(</span><span class="nv">Person</span><span class="p">).</span><br/><br/><span class="nf">wrapper</span><span class="p">(</span><span class="nv">Person</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="k">fun</span><span class="p">(</span><span class="n">getfirstname</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Person</span><span class="nl">#person.firstname</span><span class="p">;</span><br/><span class="p">(</span><span class="n">getlastname</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Person</span><span class="nl">#person.lastname</span><span class="p">;</span><br/><span class="p">(</span><span class="n">getmail</span><span class="p">)</span>      <span class="o">-&gt;</span> <span class="nv">Person</span><span class="nl">#person.mail</span><span class="p">;</span><br/><span class="p">({</span><span class="n">has</span><span class="p">,</span> <span class="nv">Field</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">member</span><span class="p">(</span><span class="nv">Field</span><span class="p">,</span> <span class="p">[</span><span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">mail</span><span class="p">]);</span><br/><span class="p">({</span><span class="n">setfirstname</span><span class="p">,</span> <span class="nv">Value</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="n">wrapper</span><span class="p">(</span><span class="nv">Person</span><span class="nl">#person</span><span class="p">{</span><span class="n">firstname</span><span class="o">=</span><span class="nv">Value</span><span class="p">});</span><br/><span class="p">({</span><span class="n">setlastname</span><span class="p">,</span> <span class="nv">Value</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="n">wrapper</span><span class="p">(</span><span class="nv">Person</span><span class="nl">#person</span><span class="p">{</span><span class="n">lastname</span><span class="o">=</span><span class="nv">Value</span><span class="p">});</span><br/><span class="p">({</span><span class="n">setmail</span><span class="p">,</span> <span class="nv">Value</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="n">wrapper</span><span class="p">(</span><span class="nv">Person</span><span class="nl">#person</span><span class="p">{</span><span class="n">mail</span><span class="o">=</span><span class="nv">Value</span><span class="p">});</span><br/><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">io_lib</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"person(</span><span class="si">~p</span><span class="s"> </span><span class="si">~p</span><span class="s"> </span><span class="si">~p</span><span class="s">)"</span><span class="p">,</span><br/><span class="p">[</span><span class="nv">Person</span><span class="nl">#person.firstname</span><span class="p">,</span> <span class="nv">Person</span><span class="nl">#person.lastname</span><span class="p">,</span><br/><span class="nv">Person</span><span class="nl">#person.mail</span><span class="p">]);</span><br/><span class="p">(</span><span class="n">record</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Person</span><span class="p">;</span><br/><span class="p">(</span><span class="n">fields</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">mail</span><span class="p">};</span><br/><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">person</span> <span class="k">end</span><span class="p">.</span><br/><br/><span class="nf">test</span><span class="p">()</span> <span class="o">-&gt;</span><br/><span class="c">% helper function</span><br/><span class="nv">Print</span> <span class="o">=</span> <span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"</span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">X</span><span class="p">])</span> <span class="k">end</span><span class="p">,</span><br/><span class="c">% create an "object"</span><br/><span class="nv">P</span> <span class="o">=</span> <span class="n">person</span><span class="p">(</span><span class="s">"mariano"</span><span class="p">,</span> <span class="s">"guerra"</span><span class="p">,</span> <span class="s">"mail"</span><span class="p">),</span><br/><span class="c">% get firstname</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">(</span><span class="n">getfirstname</span><span class="p">)),</span><br/><span class="c">% get lastname</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">(</span><span class="n">getlastname</span><span class="p">)),</span><br/><span class="c">% get mail</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">(</span><span class="n">getmail</span><span class="p">)),</span><br/><span class="c">% return the "object" as string</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">(</span><span class="n">string</span><span class="p">)),</span><br/><span class="c">% get the "object" as an erlang record</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">(</span><span class="n">record</span><span class="p">)),</span><br/><span class="c">% get the fields of the "object"</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">(</span><span class="n">fields</span><span class="p">)),</span><br/><span class="c">% get the name of the "object"</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">(</span><span class="n">name</span><span class="p">)),</span><br/><br/><span class="c">% check if the "object" has an attr called firstname</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">({</span><span class="n">has</span><span class="p">,</span> <span class="n">firstname</span><span class="p">})),</span><br/><span class="c">% check if the "object" has an attr called address</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P</span><span class="p">({</span><span class="n">has</span><span class="p">,</span> <span class="n">address</span><span class="p">})),</span><br/><br/><span class="c">% create a new "object" changing the firstname attribute</span><br/><span class="nv">P1</span> <span class="o">=</span> <span class="nv">P</span><span class="p">({</span><span class="n">setfirstname</span><span class="p">,</span> <span class="s">"Mariano"</span><span class="p">}),</span><br/><span class="c">% print the new "object"</span><br/><span class="nv">Print</span><span class="p">(</span><span class="nv">P1</span><span class="p">(</span><span class="n">string</span><span class="p">)).</span><br/></pre></div><br/><br/>la idea es generar la function person (y poner wrapper adentro) automaticamente en base a una expresion como<br/><br/>person = record(firstname lastname mail)<br/><br/>la cual genera la descripcion del record y la funcion para construir el "objeto"<br/><br/>esto agrega cosas dinamicas que los records no tienen, ya que son transformados a tuplas en tiempo de compilacion y toda la informacion del mismo se pierde, por ejemplo con un record en erlang no se puede saber sus campos, no se puede saber su nombre, no se puede manipular sin incluir el .hrl que lo define, no se puede saber si tiene un atributo y muchas cosas mas como tener que especificar el tipo de record del que estoy hablando en cada expresion (mirar el codigo de wrapper para darse una idea).<br/><br/>basicamente le agregue duck typing a los records en erlang :P<br/><br/>se podria tener una lista de estos "objetos" que en realidad son funciones con closures adentro, y checkear si tienen un atributo y hacer algo con ellos, cosa que no se podria hacer con los records de erlang.<br/><br/>en unas semanas cuando ande con tiempo lo agrego a mi lenguaje y ya casi estaria cerrado para una 0.1 :D<br/><br/>la sintaxis en efene va a quedar algo asi (reimplementando la function test)<br/><br/><div class="highlight"><pre><span class="nx">person</span> <span class="o">=</span> <span class="nx">record</span><span class="p">(</span><span class="nx">firtname</span> <span class="nx">lastname</span> <span class="nx">mail</span><span class="p">)</span><br/><br/><span class="nx">main</span> <span class="o">=</span> <span class="k">fn</span> <span class="p">()</span> <span class="p">{</span><br/><span class="nx">P</span> <span class="o">=</span> <span class="nx">person</span><span class="p">(</span><span class="s2">"mariano"</span> <span class="s2">"guerra"</span> <span class="s2">"mail"</span><span class="p">)</span><br/><span class="c"># helper function</span><br/><span class="nx">Print</span> <span class="o">=</span> <span class="k">fn</span> <span class="p">(</span><span class="nx">X</span><span class="p">)</span> <span class="p">{</span> <span class="nx">io</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s2">"~p~n"</span><span class="o">,</span> <span class="p">[</span><span class="nx">X</span><span class="p">])</span> <span class="p">}</span><br/><span class="c"># create an "object"</span><br/><span class="nx">P</span> <span class="o">=</span> <span class="nx">person</span><span class="p">(</span><span class="s2">"mariano"</span> <span class="s2">"guerra"</span> <span class="s2">"mail"</span><span class="p">)</span><br/><span class="c"># get firstname</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">(</span><span class="nx">getfirstname</span><span class="p">))</span><br/><span class="c"># get lastname</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">(</span><span class="nx">getlastname</span><span class="p">))</span><br/><span class="c"># get mail</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">(</span><span class="nx">getmail</span><span class="p">))</span><br/><span class="c"># return the "object" as string</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">(</span><span class="nx">string</span><span class="p">))</span><br/><span class="c"># get the "object" as an erlang record</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">(</span><span class="nx">record</span><span class="p">))</span><br/><span class="c"># get the fields of the "object"</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">(</span><span class="nx">fields</span><span class="p">))</span><br/><span class="c"># get the name of the "object"</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span><br/><br/><span class="c"># check if the "object" has an attr called firstname</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">((</span><span class="nx">has</span><span class="o">,</span> <span class="nx">firstname</span><span class="p">)))</span><br/><span class="c"># check if the "object" has an attr called address</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P</span><span class="p">((</span><span class="nx">has</span><span class="o">,</span> <span class="nx">address</span><span class="p">)))</span><br/><br/><span class="c"># create a new "object" changing the firstname attribute</span><br/><span class="nx">P1</span> <span class="o">=</span> <span class="nx">P</span><span class="p">((</span><span class="nx">setfirstname</span><span class="o">,</span> <span class="s2">"Mariano"</span><span class="p">))</span><br/><span class="c"># print the new "object"</span><br/><span class="nx">Print</span><span class="p">(</span><span class="nx">P1</span><span class="p">(</span><span class="nx">string</span><span class="p">))</span><br/><span class="p">}</span><br/></pre></div><br/><br/>los parentesis extras en los set* y el has son necesarios porque es una unica function que recibe un solo argumento (se debe mantener la aridad en todos los pattern matching de una misma function) y preferi que los get y los "metodos" sean simples y complicar los sets.<br/><br/>se aceptan criticas
<div style="clear: both;"/>
