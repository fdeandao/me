
enunciado del ejercicio 2<br/><br/><span style="font-style: italic;">Write a program that reads an integer value from the terminal and distributes the value to all of the MPI processes. Each process should print out its rank and the value it received. Values should be read until a negative integer is given as input. </span><br/><br/>lo resolvi ahi nomas con MPI, lo corri y todo andaba bien excepto que los procesos no imprimian (excepto el rank 0), pelee, toque, agregue fflush(stdout) y printf's por todos lados (clasica estrategia de debugger artesanal de C :D) y nada, copie el ejercicio resuelto de la pagina y le pasa lo mismo, asi que asumo que es algo relacionado con que mi notebook no es un cluster y encima tiene un solo core. aunque no sirva de mucho, aca esta la resolucion en C:<br/><br/><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span><br/><span class="cp">#include &lt;mpi.h&gt;</span><br/><br/><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span><br/><span class="kt">int</span> <span class="n">rank</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span><br/><span class="n">MPI_Status</span> <span class="n">status</span><span class="p">;</span><br/><br/><span class="n">MPI_Init</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">);</span>   <span class="c">/* starts MPI */</span><br/><span class="n">MPI_Comm_rank</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rank</span><span class="p">);</span>        <span class="c">/* get current process id */</span><br/><span class="n">MPI_Comm_size</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>        <span class="c">/* get number of processes */</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"process %d of %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span><br/><br/><span class="k">do</span> <span class="p">{</span><br/><span class="k">if</span><span class="p">(</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"give me a value: "</span><span class="p">);</span><br/><span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">);</span><br/><span class="n">MPI_Bcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_INT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">);</span><br/><span class="p">}</span><br/><span class="k">else</span> <span class="p">{</span><br/><span class="n">MPI_Recv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_INT</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"process %d received %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span><br/><span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><br/><span class="p">}</span><br/><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"negative value, closing</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span><br/><br/><span class="n">MPI_Finalize</span><span class="p">();</span><br/><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><br/><span class="p">}</span><br/></pre></div><br/><br/>el programa compila y corre, por el hecho de que me pida los valores sucesivos asumo que los procesos estan recibiendo los valores (si no se colgaria en el broadcast) pero de todas formas no imprime.<br/><br/>bueno, pase a la resolucion en erlang, aca esta el codigo:<br/><br/><div class="highlight"><pre><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ej2</span><span class="p">).</span><br/><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">run</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><br/><br/><span class="nf">run</span><span class="p">(</span><span class="nv">Total</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nv">Pids</span> <span class="o">=</span> <span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Total</span><span class="p">),</span><br/><span class="n">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">).</span><br/><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">,</span> <span class="p">[]).</span><br/><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Pids</span><span class="p">;</span><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nv">Pid</span> <span class="o">=</span> <span class="nb">spawn</span><span class="p">(</span><span class="k">fun</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">listener</span><span class="p">()</span> <span class="k">end</span><span class="p">),</span><br/><span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="nv">Pid</span><span class="p">|</span><span class="nv">Pids</span><span class="p">]).</span><br/><br/><span class="nf">listener</span><span class="p">()</span> <span class="o">-&gt;</span><br/><span class="k">receive</span><br/><span class="nv">Number</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"process </span><span class="si">~p</span><span class="s"> received </span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Number</span><span class="p">]),</span><br/><span class="k">if</span><br/><span class="nv">Number</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">listener</span><span class="p">();</span><br/><span class="n">true</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"negative value, closing </span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">()])</span><br/><span class="k">end</span><br/><span class="k">end</span><span class="p">.</span><br/><br/><span class="nf">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="k">case</span> <span class="nn">io</span><span class="p">:</span><span class="n">get_line</span><span class="p">(</span><span class="s">"give me a value (negative to quit): "</span><span class="p">)</span> <span class="k">of</span><br/><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"error reading value (</span><span class="si">~p</span><span class="s">)</span><span class="si">~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">Reason</span><span class="p">]);</span><br/><span class="n">eof</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"error reading value</span><span class="si">~n</span><span class="s">"</span><span class="p">);</span><br/><span class="nv">Value</span> <span class="o">-&gt;</span><br/><span class="k">case</span> <span class="nn">string</span><span class="p">:</span><span class="n">to_integer</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="k">of</span><br/><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"invalid value (</span><span class="si">~p</span><span class="s">)</span><span class="si">~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">Reason</span><span class="p">]),</span><br/><span class="n">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">);</span><br/><span class="p">{</span><span class="nv">IntValue</span><span class="p">,</span> <span class="p">_</span><span class="nv">Rest</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="n">send_values</span><span class="p">(</span><span class="nv">IntValue</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">),</span><br/><span class="k">if</span><br/><span class="nv">IntValue</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">);</span><br/><span class="n">true</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"negative value, closing</span><span class="si">~n</span><span class="s">"</span><span class="p">)</span><br/><span class="k">end</span><br/><span class="k">end</span><br/><span class="k">end</span><span class="p">.</span><br/><br/><span class="nf">send_values</span><span class="p">(</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nn">lists</span><span class="p">:</span><span class="n">foreach</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">Pid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Pid</span> <span class="o">!</span> <span class="nv">Value</span> <span class="k">end</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">).</span><br/><br/></pre></div><br/><br/>algunas observaciones, en este programa se pueden crear multiples grupos que escuchen a multiples entradas y de tamaños variables sin cambiar el codigo.<br/>Una observacion sobre erlang es lo raro que es la convencion de los delimitadores, por ejemplo:<br/><br/><ul><li>Si es la ultima sentencia de una funcion va con punto (a excepcion de que este haciendo pattern matching en cuyo caso todos menos la ultima son con punto y coma)</li><li>Si es una sentencia comun dentro de una funcion termina en coma, a excepcion de que sea la ultima de la funcion (en cuyo caso punto o punto y coma como vimos arriba) pero tambien a excepcion de que sea la ultima de un if, case, receive en cuyo caso es ;, pero no si es la ultima del ultimo statement en cuyo caso no lleva nada.</li></ul>estas son algunas nomas, no me costo mucho entenderlas pero lleva un tiempo acostumbrarse y por ahi le erras, mas si moves codigo o agregas statements en cuyo caso tenes que revisar los terminadores.<br/><br/>ejemplo de la salida del de erlang (probando enteros positivos, negativos y valores invalidos):<br/><br/><br/><pre><br/>$ erl<br/>Erlang (BEAM) emulator version 5.6.5 [source] [async-threads:0] [kernel-poll:false]<br/><br/>Eshell V5.6.5  (abort with ^G)<br/>1&gt; c(ej2).<br/>{ok,ej2}<br/>2&gt; ej2:run(4).<br/>give me a value (negative to quit): 42<br/>process  received 42<br/>process  received 42<br/>process  received 42<br/>process  received 42<br/>give me a value (negative to quit): 7<br/>process  received 7<br/>process  received 7<br/>process  received 7<br/>process  received 7<br/>give me a value (negative to quit): -1<br/>negative value, closing<br/>process  received -1<br/>process  received -1<br/>process  received -1<br/>process  received -1<br/>negative value, closing <br/>negative value, closing <br/>negative value, closing <br/>negative value, closing <br/>ok<br/>3&gt; ej2:run(4).<br/>give me a value (negative to quit): asd<br/>invalid value (no_integer)<br/>give me a value (negative to quit): -1<br/>negative value, closing<br/>process  received -1<br/>process  received -1<br/>process  received -1<br/>process  received -1<br/>negative value, closing <br/>negative value, closing <br/>negative value, closing <br/>negative value, closing <br/>ok<br/>4&gt; <br/><br/></pre>
<div style="clear: both;"/>
