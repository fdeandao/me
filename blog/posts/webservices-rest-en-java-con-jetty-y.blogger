
En este post voy a explicar como hacer una aplicacion Java SE que exponga una API REST tanto JSON como XML.<br/><br/>primero empezamos creando un proyecto comun en netbeans, le ponemos el nombre que se nos ocurra, te recomiendo addressbook asi no tenes que cambiar el codigo :D.<br/><br/>despues tenemos que agregar todos los jars que vamos a usar en el proyecto.<br/><br/>aca doy una lista de las ultimas versiones, pero pueden quedar desactualizadas rapido, asi que fijense si no hay mas nuevas.<br/><br/>Primero que todo necesitamos un servidor web embebido, para ello vamos a usar <a href="http://www.mortbay.org/jetty/">jetty</a>, el cual bajamos de aca: <a href="http://dist.codehaus.org/jetty/">http://dist.codehaus.org/jetty/</a> yo baje este <a href="http://dist.codehaus.org/jetty/jetty-6.1.15/jetty-6.1.15.zip">http://dist.codehaus.org/jetty/jetty-6.1.15/jetty-6.1.15.zip</a> al descomprimir el zip, en la carpeta lib estan los jars que hacen falta<br/><br/>Tambien necesitamos una libraria para poder exponer nuestros webservices REST, para ello vamos a usar <a href="http://jersey.dev.java.net/">jersey</a>, yo baje el bundle (contiene todos los jars adentro que requiere) de aca <a href="http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/">http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/</a>, particularmente yo baje la version 1.0.2 de aca <a href="http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.0.2/jersey-bundle-1.0.2.jar">http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.0.2/jersey-bundle-1.0.2.jar</a><br/><br/>el jar asm lo podemos descargar de aca <a href="http://maven.objectweb.org/maven2/asm/asm">http://maven.objectweb.org/maven2/asm/asm</a>/ yo baje la version 3.1 de aca <a href="http://maven.objectweb.org/maven2/asm/asm/3.1/asm-3.1.jar">http://maven.objectweb.org/maven2/asm/asm/3.1/asm-3.1.jar</a><br/><br/>el jar jsr311 se encuentra en <a href="http://download.java.net/maven/2/javax/ws/rs/jsr311-api/">http://download.java.net/maven/2/javax/ws/rs/jsr311-api/</a> yo baje <a href="http://download.java.net/maven/2/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0.jar">http://download.java.net/maven/2/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0.jar</a><br/><br/>Para empezar agregamos los siguientes jar al proyecto:<br/><br/>jersey-bundle-1.0.2.jar<br/>jetty-util-6.1.15.jar<br/>servlet-api-2.5-20081211.jar<br/>jetty-6.1.15.jar<br/>jsr311-api-1.0.jar<br/>asm-3.1.jar<br/><br/>Creamos un archivo main con el siguiente contenido<br/><br/><div class="highlight"><pre><span class="c">/*</span><br/><span class="c"> * To change this template, choose Tools | Templates</span><br/><span class="c"> * and open the template in the editor.</span><br/><span class="c"> */</span><br/><br/><span class="k">package</span> <span class="n">addressbook</span><span class="o">;</span><br/><br/><span class="k">import</span> <span class="nn">com.sun.jersey.spi.container.servlet.ServletContainer</span><span class="o">;</span><br/><span class="k">import</span> <span class="nn">org.mortbay.jetty.Handler</span><span class="o">;</span><br/><span class="k">import</span> <span class="nn">org.mortbay.jetty.handler.DefaultHandler</span><span class="o">;</span><br/><span class="k">import</span> <span class="nn">org.mortbay.jetty.handler.HandlerList</span><span class="o">;</span><br/><span class="k">import</span> <span class="nn">org.mortbay.jetty.servlet.Context</span><span class="o">;</span><br/><span class="k">import</span> <span class="nn">org.mortbay.jetty.servlet.ServletHolder</span><span class="o">;</span><br/><br/><span class="c">/**</span><br/><span class="c"> *</span><br/><span class="c"> * @author mariano</span><br/><span class="c"> */</span><br/><span class="k">public</span> <span class="k">class</span> <span class="nc">Main</span> <span class="o">{</span><br/><br/><span class="c">/**</span><br/><span class="c">     * @param args the command line arguments</span><br/><span class="c">     */</span><br/><span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">Exception</span><span class="o">{</span><br/><span class="n">org</span><span class="o">.</span><span class="na">mortbay</span><span class="o">.</span><span class="na">jetty</span><span class="o">.</span><span class="na">Server</span> <span class="n">server</span><span class="o">;</span><br/><span class="n">ServletHolder</span> <span class="n">holder</span><span class="o">;</span><br/><span class="n">Context</span> <span class="n">contextWS</span><span class="o">;</span><br/><br/><span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServletHolder</span><span class="o">(</span><span class="n">ServletContainer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span><br/><br/><span class="n">holder</span><span class="o">.</span><span class="na">setInitParameter</span><span class="o">(</span><span class="s">"com.sun.jersey.config.property.packages"</span><span class="o">,</span><br/><span class="s">"addressbook.ws"</span><span class="o">);</span><br/><br/><span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">mortbay</span><span class="o">.</span><span class="na">jetty</span><span class="o">.</span><span class="na">Server</span><span class="o">(</span><span class="mi">9999</span><span class="o">);</span><br/><br/><span class="n">contextWS</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Context</span><span class="o">(</span><span class="n">server</span><span class="o">,</span> <span class="s">"/ws"</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">SESSIONS</span><span class="o">);</span><br/><span class="n">contextWS</span><span class="o">.</span><span class="na">addServlet</span><span class="o">(</span><span class="n">holder</span><span class="o">,</span> <span class="s">"/*"</span><span class="o">);</span><br/><span class="n">HandlerList</span> <span class="n">handlers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerList</span><span class="o">();</span><br/><span class="n">handlers</span><span class="o">.</span><span class="na">setHandlers</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">[]</span> <span class="o">{</span> <span class="n">contextWS</span><span class="o">,</span> <span class="k">new</span> <span class="n">DefaultHandler</span><span class="o">()});</span><br/><span class="n">server</span><span class="o">.</span><span class="na">setHandler</span><span class="o">(</span><span class="n">handlers</span><span class="o">);</span><br/><br/><span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span><br/><span class="o">}</span><br/><br/><span class="o">}</span><br/></pre></div><br/><br/><br/>lo que hace es inicializar el server en el puerto 9999 y pasarle un handler para los requests que estan bajo el path /ws.<br/><br/>la linea<br/><br/><pre><span class="n">holder</span><span class="o">.</span><span class="na">setInitParameter</span><span class="o">(</span><span class="s">"com.sun.jersey.config.property.packages"</span><span class="o">,</span> <span class="s">"addressbook.ws"</span><span class="o">);<br/></span></pre><br/><br/>le dice que busque los manejadores de ws en el paquete addressbook.ws, por lo tanto el siguiente paso es crear el paquete addressbook.ws.<br/><br/>Por lo que veran el ejemplo va a ser un libro de direcciones o cosas por el estilo.<br/><br/>despues de crear el paquete creamos una clase adentro que llamamos AddressBook<br/><br/>el contenido es el siguiente:<br/><br/><div class="highlight"><pre><span class="c">/*</span><br/><span class="c"> * To change this template, choose Tools | Templates</span><br/><span class="c"> * and open the template in the editor.</span><br/><span class="c"> */</span><br/><br/><span class="k">package</span> <span class="n">addressbook</span><span class="o">.</span><span class="na">ws</span><span class="o">;</span><br/><br/><span class="k">import</span> <span class="nn">javax.ws.rs.GET</span><span class="o">;</span><br/><span class="k">import</span> <span class="nn">javax.ws.rs.Path</span><span class="o">;</span><br/><span class="k">import</span> <span class="nn">javax.ws.rs.PathParam</span><span class="o">;</span><br/><span class="k">import</span> <span class="nn">javax.ws.rs.QueryParam</span><span class="o">;</span><br/><br/><span class="c">/**</span><br/><span class="c"> *</span><br/><span class="c"> * @author mariano</span><br/><span class="c"> */</span><br/><span class="nd">@Path</span><span class="o">(</span><span class="s">"book"</span><span class="o">)</span><br/><span class="k">public</span> <span class="k">class</span> <span class="nc">AddressBook</span> <span class="o">{</span><br/><br/><span class="nd">@GET</span><br/><span class="nd">@Path</span><span class="o">(</span><span class="s">"all"</span><span class="o">)</span><br/><span class="k">public</span> <span class="k">static</span> <span class="n">String</span> <span class="nf">getAll</span><span class="o">()</span><br/><span class="o">{</span><br/><span class="k">return</span> <span class="s">"all"</span><span class="o">;</span><br/><span class="o">}</span><br/><br/><span class="nd">@GET</span><br/><span class="nd">@Path</span><span class="o">(</span><span class="s">"search/{type}/{query}"</span><span class="o">)</span><br/><span class="k">public</span> <span class="k">static</span> <span class="n">String</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@PathParam</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="nd">@PathParam</span><span class="o">(</span><span class="s">"query"</span><span class="o">)</span> <span class="n">String</span> <span class="n">query</span><span class="o">)</span><br/><span class="o">{</span><br/><span class="k">return</span> <span class="n">type</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">query</span><span class="o">;</span><br/><span class="o">}</span><br/><span class="o">}</span><br/></pre></div><br/><br/><br/>El codigo es bastante simple, en la clase le decimos cual es el path base de esa clase, y en cada metodo le decimos que tipo de request responde (en lenguaje REST tenemos GET, POST, PUT y DELETE) y tambien podemos especificarle parametros los cuales van entre llaves en @Path y tambien en el metodo debemos anotar cual parametro del path se asigna a que parametro del metodo.<br/><br/>Por ahora los metodos devuelven cosas simples, en otro post voy a mostrar como serializar/descerializar objetos java de/a XML y JSON<br/><br/>si lo corremos y vamos con el browser a http://0.0.0.0:9999/ws/book/all vamos a ver el texto "all", si vamos a http://0.0.0.0:9999/ws/book/search/name/bob vamos a ver "name bob"
<div style="clear: both;"/>
