
problema 3 y observaciones<br/><br/>el operador de modulo en erlang es muy poco intuitivo.<br/><br/>ej<br/><br/>1&gt; 2.0 rem 2.<br/>** exception error: bad argument in an arithmetic expression<br/>     in operator  rem/2<br/>        called as 2.0 rem 2<br/><br/>si salta una excepcion en un guard en erlang no te dice que fue malo solo falla el guard<br/><br/>y alguna cosa mas que no me acuerdo.<br/><br/>python<br/><br/><div class="highlight"><pre><span class="k">import</span> <span class="nn">math</span><br/><br/><span class="k">def</span> <span class="nf">factors</span><span class="p">(</span><span class="n">value</span><span class="p">):</span><br/><span class="n">factors</span> <span class="o">=</span> <span class="p">[]</span><br/><span class="n">factor</span> <span class="o">=</span> <span class="mf">2.0</span><br/><span class="n">new_value</span> <span class="o">=</span> <span class="n">value</span><br/><span class="n">val_sqrt</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="kp">sqrt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><br/><br/><span class="k">while</span> <span class="n">factor</span> <span class="o">&lt;</span> <span class="n">val_sqrt</span><span class="p">:</span><br/><span class="k">if</span> <span class="n">new_value</span> <span class="o">%</span> <span class="n">factor</span> <span class="o">==</span> <span class="mf">0</span><span class="p">:</span><br/><span class="n">factors</span><span class="o">.</span><span class="kp">append</span><span class="p">(</span><span class="n">factor</span><span class="p">)</span><br/><span class="c">#new_value /= factor</span><br/><br/><span class="n">factor</span> <span class="o">+=</span> <span class="mf">1</span><br/><br/><span class="k">return</span> <span class="n">factors</span><br/><br/><span class="k">def</span> <span class="nf">calculate</span><span class="p">(</span><span class="n">value</span><span class="p">):</span><br/><span class="k">return</span> <span class="n">factors</span><span class="p">(</span><span class="n">value</span><span class="p">)[</span><span class="o">-</span><span class="mf">1</span><span class="p">]</span><br/><br/><span class="k">def</span> <span class="nf">print_results</span><span class="p">():</span><br/><span class="k">print</span> <span class="n">calculate</span><span class="p">(</span><span class="mf">600851475143</span><span class="p">)</span><br/><br/><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span><br/><span class="n">print_results</span><span class="p">()</span><br/></pre></div><br/><br/>erlang<br/><br/><div class="highlight"><pre><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ej_003</span><span class="p">).</span><br/><span class="p">-</span><span class="ni">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">).</span><br/><br/><span class="nf">factors</span><span class="p">(</span><span class="nv">Factor</span><span class="p">,</span> <span class="p">_</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">,</span> <span class="nv">Accum</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Factor</span> <span class="o">&gt;</span> <span class="nv">Limit</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="nv">Accum</span><span class="p">);</span><br/><span class="nf">factors</span><span class="p">(</span><span class="nv">Factor</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">,</span> <span class="nv">Accum</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Value</span> <span class="ow">rem</span> <span class="nv">Factor</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">-&gt;</span><br/><span class="n">factors</span><span class="p">(</span><span class="nv">Factor</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">trunc</span><span class="p">(</span><span class="nv">Value</span><span class="o">/</span><span class="nv">Factor</span><span class="p">),</span> <span class="nv">Limit</span><span class="p">,</span> <span class="p">[</span><span class="nv">Factor</span> <span class="p">|</span> <span class="nv">Accum</span><span class="p">]);</span><br/><span class="nf">factors</span><span class="p">(</span><span class="nv">Factor</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">,</span> <span class="nv">Accum</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="n">factors</span><span class="p">(</span><span class="nv">Factor</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Limit</span><span class="p">,</span> <span class="nv">Accum</span><span class="p">).</span><br/><br/><span class="nf">factors</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">factors</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nb">trunc</span><span class="p">(</span><span class="nn">math</span><span class="p">:</span><span class="n">sqrt</span><span class="p">(</span><span class="nv">Value</span><span class="p">)),</span> <span class="p">[]).</span><br/><br/><span class="nf">print_results</span><span class="p">()</span> <span class="o">-&gt;</span><br/><span class="nv">Factors</span> <span class="o">=</span> <span class="n">factors</span><span class="p">(</span><span class="mi">600851475143</span><span class="p">),</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"</span><span class="si">~w~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">Factors</span><span class="p">]),</span><br/><span class="k">if</span><br/><span class="nb">length</span><span class="p">(</span><span class="nv">Factors</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"</span><span class="si">~w~n</span><span class="s">"</span><span class="p">,</span> <span class="p">([</span><span class="nn">lists</span><span class="p">:</span><span class="n">last</span><span class="p">(</span><span class="nv">Factors</span><span class="p">)]));</span><br/><span class="n">true</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"No factor</span><span class="si">~n</span><span class="s">"</span><span class="p">)</span><br/><span class="k">end</span><span class="p">.</span><br/></pre></div><br/><br/><br/>lisp<br/><br/><div class="highlight"><pre><span class="p">(</span><span class="nb">defun</span> <span class="nv">factors-helper</span> <span class="p">(</span><span class="nv">value</span> <span class="nv">limit</span><span class="p">)</span><br/><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">factor</span> <span class="nv">from</span> <span class="mi">2</span> <span class="nb">when</span> <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nb">rem</span> <span class="nv">value</span> <span class="nv">factor</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">collect</span> <span class="nv">factor</span> <span class="nv">while</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">factor</span> <span class="nv">limit</span><span class="p">)))</span><br/><br/><span class="p">(</span><span class="nb">defun</span> <span class="nv">factors</span> <span class="p">(</span><span class="nv">value</span><span class="p">)</span> <span class="p">(</span><span class="nv">factors-helper</span> <span class="nv">value</span> <span class="p">(</span><span class="nb">truncate</span> <span class="p">(</span><span class="nb">sqrt</span> <span class="nv">value</span><span class="p">))))</span><br/><br/><span class="p">(</span><span class="nb">defun</span> <span class="nv">print-results</span> <span class="p">()</span> <span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nb">last</span> <span class="p">(</span><span class="nv">factors</span> <span class="mi">600851475143</span><span class="p">))))</span><br/><br/><span class="p">(</span><span class="nv">print-results</span><span class="p">)</span><br/></pre></div>
<div style="clear: both;"/>
