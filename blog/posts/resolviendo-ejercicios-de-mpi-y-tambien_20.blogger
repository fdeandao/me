
Sigo molestando con estos problemas, me salte uno que no me daba ganas de resolver y pase al siguiente:<br/><br/>http://www.mcs.anl.gov/research/projects/mpi/tutorial/mpiexmpl/src/ring/C/main.html<br/><br/><span style="font-style: italic;">Write a program that takes data from process zero and sends it to all of the other processes by sending it in a ring.  That is, process i should receive the data and send it to process i+1, until the last process is reached.  </span><br/><br/>la solucion en C salio bastante facil haciendo copypasta de los problemas anteriores y sorprendentemente en este caso los otros procesos si imprimieron a la consola:<br/><br/><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span><br/><span class="cp">#include &lt;mpi.h&gt;</span><br/><br/><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span><br/><span class="kt">int</span> <span class="n">rank</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span><br/><span class="n">MPI_Status</span> <span class="n">status</span><span class="p">;</span><br/><br/><span class="n">MPI_Init</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">);</span>   <span class="c">/* starts MPI */</span><br/><span class="n">MPI_Comm_rank</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rank</span><span class="p">);</span>        <span class="c">/* get current process id */</span><br/><span class="n">MPI_Comm_size</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>        <span class="c">/* get number of processes */</span><br/><br/><span class="k">do</span> <span class="p">{</span><br/><span class="k">if</span><span class="p">(</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"give me a value: "</span><span class="p">);</span><br/><span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">);</span><br/><span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><br/><span class="n">MPI_Send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_INT</span><span class="p">,</span> <span class="n">rank</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">);</span><br/><span class="p">}</span><br/><span class="k">else</span><span class="p">{</span><br/><span class="n">MPI_Recv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_INT</span><span class="p">,</span> <span class="n">rank</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"process %d received %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span><br/><span class="k">if</span><span class="p">(</span><span class="n">rank</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"sending to %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rank</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span><br/><span class="n">MPI_Send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_INT</span><span class="p">,</span> <span class="n">rank</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">);</span><br/><span class="p">}</span><br/><span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><br/><span class="p">}</span><br/><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"negative value, closing</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span><br/><br/><span class="n">MPI_Finalize</span><span class="p">();</span><br/><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><br/><span class="p">}</span><br/></pre></div><br/><br/>la solucion en erlang (tambien robando del ejercicio anterior):<br/><br/><div class="highlight"><pre><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ej5</span><span class="p">).</span><br/><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">run</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><br/><br/><span class="nf">run</span><span class="p">(</span><span class="nv">Total</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nv">NextPid</span> <span class="o">=</span> <span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Total</span><span class="p">),</span><br/><span class="n">get_values</span><span class="p">(</span><span class="nv">NextPid</span><span class="p">).</span><br/><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">,</span> <span class="n">none</span><span class="p">).</span><br/><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">NextPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">NextPid</span><span class="p">;</span><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">,</span> <span class="nv">LastPid</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nv">NextPid</span> <span class="o">=</span> <span class="nb">spawn</span><span class="p">(</span><span class="k">fun</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">listener</span><span class="p">(</span><span class="nv">LastPid</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span><br/><span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">NextPid</span><span class="p">).</span><br/><br/><span class="nf">listener</span><span class="p">(</span><span class="nv">NextPid</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="k">receive</span><br/><span class="nv">Int</span> <span class="o">-&gt;</span> <br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"process </span><span class="si">~p</span><span class="s"> received </span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Int</span><span class="p">]),</span><br/><span class="k">if</span><br/><span class="nv">NextPid</span> <span class="o">/=</span> <span class="n">none</span> <span class="o">-&gt;</span> <br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"sending to </span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextPid</span><span class="p">]),</span><br/><span class="nv">NextPid</span> <span class="o">!</span> <span class="nv">Int</span><span class="p">;</span><br/><span class="n">true</span> <span class="o">-&gt;</span> <span class="n">ok</span><br/><span class="k">end</span><span class="p">,</span><br/><span class="k">if</span> <br/><span class="nv">Int</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">listener</span><span class="p">(</span><span class="nv">NextPid</span><span class="p">);</span><br/><span class="n">true</span> <span class="o">-&gt;</span> <br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"negative value, closing </span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">()])</span><br/><span class="k">end</span><br/><span class="k">end</span><span class="p">.</span><br/><br/><span class="nf">get_value</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">ConversionFun</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="k">case</span> <span class="nn">io</span><span class="p">:</span><span class="n">get_line</span><span class="p">(</span><span class="nv">Message</span><span class="p">)</span> <span class="k">of</span> <br/><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">};</span><br/><span class="n">eof</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">eof</span><span class="p">};</span><br/><span class="nv">Value</span> <span class="o">-&gt;</span> <span class="nv">ConversionFun</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span><br/><span class="k">end</span><span class="p">.</span><br/><br/><span class="nf">get_values</span><span class="p">(</span><span class="nv">NextPid</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="k">case</span> <span class="n">get_value</span><span class="p">(</span><span class="s">"give me an int value (negative to quit): "</span><span class="p">,</span> <span class="k">fun</span><span class="p">(</span><span class="nv">Val</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">string</span><span class="p">:</span><span class="n">to_integer</span><span class="p">(</span><span class="nv">Val</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> <span class="k">of</span><br/><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"error reading int value (</span><span class="si">~p</span><span class="s">)</span><span class="si">~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">Reason</span><span class="p">]),</span><br/><span class="n">get_values</span><span class="p">(</span><span class="nv">NextPid</span><span class="p">);</span><br/><span class="p">{</span><span class="nv">IntValue</span><span class="p">,</span> <span class="p">_</span><span class="nv">Rest</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"sending to </span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextPid</span><span class="p">]),</span><br/><span class="nv">NextPid</span> <span class="o">!</span> <span class="nv">IntValue</span><span class="p">,</span><br/><span class="k">if</span> <br/><span class="nv">IntValue</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">get_values</span><span class="p">(</span><span class="nv">NextPid</span><span class="p">);</span><br/><span class="n">true</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"negative value, closing</span><span class="si">~n</span><span class="s">"</span><span class="p">)</span><br/><span class="k">end</span><br/><span class="k">end</span><span class="p">.</span><br/></pre></div><br/><br/>ejemplo de salida:<br/><br/>$ erl<br/>Erlang (BEAM) emulator version 5.6.5 [source] [async-threads:0] [kernel-poll:false]<br/><br/>Eshell V5.6.5  (abort with ^G)<br/>1&gt; c(ej5).<br/>{ok,ej5}<br/>2&gt; ej5:run(3).<br/>give me an int value (negative to quit): 3<br/>sending to <br/>process  received 3              <br/>sending to                       <br/>process  received 3              <br/>sending to                       <br/>process  received 3              <br/>give me an int value (negative to quit): asd<br/>error reading int value (no_integer)<br/>give me an int value (negative to quit): 42<br/>sending to <br/>process  received 42             <br/>sending to                       <br/>process  received 42             <br/>sending to                       <br/>process  received 42             <br/>give me an int value (negative to quit): -1<br/>sending to <br/>negative value, closing<br/>process  received -1<br/>sending to <br/>ok<br/>negative value, closing <br/>process  received -1<br/>sending to <br/>negative value, closing <br/>process  received -1<br/>negative value, closing 
<div style="clear: both;"/>
