
enunciado del problema:<br/><br/><span style="font-style: italic;">In this assignment, you will modify your arguement broadcast routine to communicate different datatypes with a single MPI broadcast (MPI_Bcast) call. Have your program read an integer and a double-precision value from standard input (from process 0, as before), and communicate this to all of the other processes with an MPI_Bcast call. Use MPI datatypes.<br/><br/>Have all processes exit when a negative integer is read.</span><br/><br/>aca esta la resolucion en C:<br/><br/><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span><br/><span class="cp">#include &lt;mpi.h&gt;</span><br/><br/><span class="n">MPI_Datatype</span> <span class="n">IntDoubleType</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><br/><br/><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span><br/><span class="kt">int</span> <span class="n">value_int</span><span class="p">;</span><br/><span class="kt">double</span> <span class="n">value_double</span><span class="p">;</span><br/><span class="p">}</span><span class="n">IntDouble</span><span class="p">;</span><br/><br/><span class="n">MPI_Datatype</span> <span class="nf">create_int_double_type</span><span class="p">()</span> <span class="p">{</span><br/><span class="k">if</span><span class="p">(</span><span class="n">IntDoubleType</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br/><span class="n">MPI_Aint</span> <span class="n">array_of_displacements</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><br/><span class="n">MPI_Datatype</span> <span class="n">array_of_types</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><br/><span class="kt">int</span> <span class="n">array_of_blocklengths</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><br/><br/><span class="n">array_of_displacements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><br/><span class="n">array_of_types</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">MPI_INT</span><span class="p">;</span><br/><span class="n">array_of_blocklengths</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><br/><br/><span class="n">array_of_displacements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><br/><span class="n">array_of_types</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">MPI_DOUBLE</span><span class="p">;</span><br/><span class="n">array_of_blocklengths</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><br/><br/><span class="n">MPI_Type_struct</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">array_of_blocklengths</span><span class="p">,</span> <span class="n">array_of_displacements</span><span class="p">,</span><br/><span class="n">array_of_types</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">IntDoubleType</span><span class="p">);</span><br/><span class="n">MPI_Type_commit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">IntDoubleType</span><span class="p">);</span><br/><br/><span class="p">}</span><br/><br/><span class="k">return</span> <span class="n">IntDoubleType</span><span class="p">;</span><br/><span class="p">}</span><br/><br/><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span><br/><span class="kt">int</span> <span class="n">rank</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">value_int</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span><br/><span class="kt">double</span> <span class="n">value_double</span><span class="p">;</span><br/><span class="n">IntDouble</span> <span class="n">value</span><span class="p">;</span><br/><span class="n">MPI_Status</span> <span class="n">status</span><span class="p">;</span><br/><br/><span class="n">MPI_Init</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">);</span>   <span class="c">/* starts MPI */</span><br/><span class="n">MPI_Comm_rank</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rank</span><span class="p">);</span>        <span class="c">/* get current process id */</span><br/><span class="n">MPI_Comm_size</span> <span class="p">(</span><span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>        <span class="c">/* get number of processes */</span><br/><span class="n">create_int_double_type</span><span class="p">();</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"process %d of %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span><br/><br/><span class="k">do</span> <span class="p">{</span><br/><span class="k">if</span><span class="p">(</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"give me an int value: "</span><span class="p">);</span><br/><span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value_int</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"give me a double value: "</span><span class="p">);</span><br/><span class="n">scanf</span><span class="p">(</span><span class="s">"%lf"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value_double</span><span class="p">);</span><br/><span class="n">value</span><span class="p">.</span><span class="n">value_int</span> <span class="o">=</span> <span class="n">value_int</span><span class="p">;</span><br/><span class="n">value</span><span class="p">.</span><span class="n">value_double</span> <span class="o">=</span> <span class="n">value_double</span><span class="p">;</span><br/><span class="n">MPI_Bcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">IntDoubleType</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">);</span><br/><span class="p">}</span><br/><span class="k">else</span> <span class="p">{</span><br/><span class="n">MPI_Recv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">IntDoubleType</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MPI_COMM_WORLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"process %d received %d %lf</span><span class="se">\n<span class="s">"</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">value</span><span class="p">.</span><span class="n">value_int</span><span class="p">,</span><br/><span class="n">value</span><span class="p">.</span><span class="n">value_double</span><span class="p">);</span><br/><span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><br/><span class="p">}</span><br/><span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">value_int</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span><br/><span class="n">printf</span><span class="p">(</span><span class="s">"negative value, closing</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span><br/><br/><span class="n">MPI_Finalize</span><span class="p">();</span><br/><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><br/><span class="p">}</span><br/></span></pre></div><br/><br/><br/>aca la resolucion en erlang:<br/><br/><div class="highlight"><pre><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ej3</span><span class="p">).</span><br/><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">run</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><br/><br/><span class="nf">run</span><span class="p">(</span><span class="nv">Total</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nv">Pids</span> <span class="o">=</span> <span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Total</span><span class="p">),</span><br/><span class="n">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">).</span><br/><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">,</span> <span class="p">[]).</span><br/><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Pids</span><span class="p">;</span><br/><span class="nf">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nv">Pid</span> <span class="o">=</span> <span class="nb">spawn</span><span class="p">(</span><span class="k">fun</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">listener</span><span class="p">()</span> <span class="k">end</span><span class="p">),</span><br/><span class="n">spawn_listeners</span><span class="p">(</span><span class="nv">Count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="nv">Pid</span><span class="p">|</span><span class="nv">Pids</span><span class="p">]).</span><br/><br/><span class="nf">listener</span><span class="p">()</span> <span class="o">-&gt;</span><br/><span class="k">receive</span><br/><span class="p">{</span><span class="nv">Int</span><span class="p">,</span> <span class="nv">Double</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"process </span><span class="si">~p</span><span class="s"> received </span><span class="si">~p</span><span class="s"> </span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Int</span><span class="p">,</span> <span class="nv">Double</span><span class="p">]),</span><br/><span class="k">if</span><br/><span class="nv">Int</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">listener</span><span class="p">();</span><br/><span class="n">true</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"negative value, closing </span><span class="si">~p~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">()])</span><br/><span class="k">end</span><br/><span class="k">end</span><span class="p">.</span><br/><br/><span class="nf">get_value</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">ConversionFun</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="k">case</span> <span class="nn">io</span><span class="p">:</span><span class="n">get_line</span><span class="p">(</span><span class="nv">Message</span><span class="p">)</span> <span class="k">of</span><br/><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">};</span><br/><span class="n">eof</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">eof</span><span class="p">};</span><br/><span class="nv">Value</span> <span class="o">-&gt;</span> <span class="nv">ConversionFun</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span><br/><span class="k">end</span><span class="p">.</span><br/><br/><span class="nf">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="k">case</span> <span class="n">get_value</span><span class="p">(</span><span class="s">"give me an int value (negative to quit): "</span><span class="p">,</span> <span class="k">fun</span><span class="p">(</span><span class="nv">Val</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">string</span><span class="p">:</span><span class="n">to_integer</span><span class="p">(</span><span class="nv">Val</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> <span class="k">of</span><br/><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"error reading int value (</span><span class="si">~p</span><span class="s">)</span><span class="si">~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">Reason</span><span class="p">]),</span><br/><span class="n">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">);</span><br/><span class="p">{</span><span class="nv">IntValue</span><span class="p">,</span> <span class="p">_</span><span class="nv">Rest</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="k">case</span> <span class="n">get_value</span><span class="p">(</span><span class="s">"give me a double value): "</span><span class="p">,</span> <span class="k">fun</span><span class="p">(</span><span class="nv">Val</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">string</span><span class="p">:</span><span class="n">to_float</span><span class="p">(</span><span class="nv">Val</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> <span class="k">of</span><br/><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"error reading double value (</span><span class="si">~p</span><span class="s">)</span><span class="si">~n</span><span class="s">"</span><span class="p">,</span> <span class="p">[</span><span class="nv">Reason</span><span class="p">]),</span><br/><span class="n">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">);</span><br/><span class="p">{</span><span class="nv">DoubleValue</span><span class="p">,</span> <span class="p">_</span><span class="nv">Rest</span><span class="p">}</span> <span class="o">-&gt;</span><br/><span class="n">send_values</span><span class="p">({</span><span class="nv">IntValue</span><span class="p">,</span> <span class="nv">DoubleValue</span><span class="p">},</span> <span class="nv">Pids</span><span class="p">),</span><br/><span class="k">if</span><br/><span class="nv">IntValue</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">-&gt;</span> <span class="n">get_values</span><span class="p">(</span><span class="nv">Pids</span><span class="p">);</span><br/><span class="n">true</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">"negative value, closing</span><span class="si">~n</span><span class="s">"</span><span class="p">)</span><br/><span class="k">end</span><br/><span class="k">end</span><br/><span class="k">end</span><span class="p">.</span><br/><br/><span class="nf">send_values</span><span class="p">(</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">)</span> <span class="o">-&gt;</span><br/><span class="nn">lists</span><span class="p">:</span><span class="n">foreach</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">Pid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Pid</span> <span class="o">!</span> <span class="nv">Value</span> <span class="k">end</span><span class="p">,</span> <span class="nv">Pids</span><span class="p">).</span><br/><br/></pre></div><br/><br/>Algunas observaciones.<br/>Cuando el problema empieza a escalar en complejidad de los tipos de datos enviados vemos que erlang empieza a hacernos las tareas mas faciles sin tener que declarar tipos complejos antes de enviarlos.<br/>Otra cosa que note es que erlang un poco nos obliga a tratar los errores con el tema de pattern matching por lo que si bien el codigo erlang es un poco mas largo en realidad esta teniendo en cuenta todos los posibles casos de fallo, en el de C por ejemplo si no entro un entero o un float, el comportamiento es indeterminado (en mi maquina se mete en un loop infinito haciendo printf). Ya se que deberia usar algo como un buffer de string y despues usar atoi o similar pero para algo esta scanf :D.
<div style="clear: both;"/>
