
este cambio es muy simple asi que va a ser un post muy corto, voy a resaltar los cambios<br/><br/>en calc_lexer.xrl<br/><br/><span style="font-family: courier new;">Definitions.</span><br/><br/><span style="font-family: courier new;">D   = [0-9]</span><br/><span style="font-family: courier new;">AOP   = (\+|-)</span><br/><span style="font-family: courier new;">WS  = ([\000-\s]|#.*)</span><br/><br/><span style="font-family: courier new;">Rules.</span><br/><br/><span style="font-family: courier new;">{AOP}   : {token,{add_operator,TokenLine,list_to_atom(TokenChars)}}.</span><br/><span style="font-family: courier new;">{D}+   : {token,{integer,TokenLine,list_to_integer(TokenChars)}}.</span><br/><span style="font-weight: bold; font-family: courier new;">{D}+\.{D}+   : {token,{float,TokenLine,list_to_float(TokenChars)}}.</span><br/><span style="font-family: courier new;">{WS}+  : skip_token.</span><br/><br/><span style="font-family: courier new;">Erlang code.</span><br/><br/>en calc_parser.yrl<br/><br/><span style="font-family: courier new;">Nonterminals </span><br/><span style="font-family: courier new;">predicate.</span><br/><br/><span style="font-family: courier new;">Terminals </span><br/><span style="font-family: courier new;">add_operator integer float.</span><br/><br/><span style="font-family: courier new;">Rootsymbol predicate.</span><br/><br/><span style="font-family: courier new;">Left 300 add_operator.</span><br/><br/><span style="font-family: courier new;">predicate -&gt; predicate add_operator predicate : {unwrap('$2'), '$1', '$3'}.</span><br/><br/><span style="font-family: courier new;">predicate -&gt; integer : unwrap('$1').</span><br/><span style="font-family: courier new; font-weight: bold;">predicate -&gt; float : unwrap('$1').</span><br/><br/><span style="font-family: courier new;">Erlang code.</span><br/><br/><span style="font-family: courier new;">unwrap({_,_,V}) -&gt; V.</span><br/><br/>en calc.erl<br/><br/>-module(calc).<br/>-export([solve/1]).<br/><br/>solve(String) -&gt;<br/>    {ok, Tokens, _Endline} = calc_lexer:string(String),<br/>    {ok, Tree} = calc_parser:parse(Tokens),<br/>    matches(Tree).<br/><br/><span style="font-weight: bold;">matches(A) when is_number(A) -&gt; A;</span><br/>matches({'+', A, B}) -&gt; matches(A) + matches(B);<br/>matches({'-', A, B}) -&gt; matches(A) - matches(B);<br/>matches(_) -&gt; error.<br/><br/>para facilitar la construccion, les dejo el codigo que tengo en build_calc.erl<br/><br/><br/><pre><br/>-module(build_calc).<br/>-export([build/0, test/0]).<br/><br/>build() -&gt;<br/>    leex:file(calc_lexer),<br/>    yecc:file(calc_parser),<br/>    compile:file(calc_lexer),<br/>    compile:file(calc_parser),<br/>    compile:file(calc),<br/>    ok.<br/><br/></pre>
<div style="clear: both;"/>
