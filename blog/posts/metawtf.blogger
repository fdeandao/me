
jugando un poco con metaclases y decoradores para hacer los plugins de emesene mas seguros.<br/><br/>el problema que intento resolver es el siguiente.<br/><br/>dada una función o un método que pueden llegar a fallar:<br/><br/><div class="highlight"><pre><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">function</span>(a, b):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> a <span style="color: rgb(102, 102, 102);">/</span> b<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">class</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">Object</span>(<span style="color: rgb(0, 112, 32);">object</span>):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__init__</span>(<span style="color: rgb(0, 112, 32);">self</span>, num):<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>num <span style="color: rgb(102, 102, 102);">=</span> num<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">method</span>(<span style="color: rgb(0, 112, 32);">self</span>, a, b):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''return a / b * self.num'''</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> a <span style="color: rgb(102, 102, 102);">/</span> b <span style="color: rgb(102, 102, 102);">*</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>num<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"function(1, 2) = "</span>, function(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">2</span>)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"Object(10).method(1, 2) = "</span>, Object(<span style="color: rgb(64, 160, 112);">10</span>)<span style="color: rgb(102, 102, 102);">.</span>method(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">2</span>)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"trying function(1, 0)"</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">try</span>:<br/>  function(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">0</span>)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">except</span> <span style="color: rgb(0, 112, 32);">ZeroDivisionError</span>, error:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> error<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"trying Object(10).method(1, 0)"</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">try</span>:<br/>  Object(<span style="color: rgb(64, 160, 112);">10</span>)<span style="color: rgb(102, 102, 102);">.</span>method(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">0</span>)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">except</span> <span style="color: rgb(0, 112, 32);">ZeroDivisionError</span>, error:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> error<br/></pre></div><br/><br/>cuya salida es:<br/><br/><pre><br/>function(1, 2) =  0<br/>Object(10).method(1, 2) =  0<br/>trying function(1, 0)<br/>integer division or modulo by zero<br/>trying Object(10).method(1, 0)<br/>integer division or modulo by zero<br/></pre><br/><br/>usando el modulo sandbox podemos hacer:<br/><br/><div class="highlight"><pre><span style="color: rgb(0, 112, 32); font-weight: bold;">import</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">sandbox</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">callback</span>(function, exception_type, exception):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"exception raised by </span><span style="color: rgb(112, 160, 208); font-style: italic;">%s</span><span style="color: rgb(64, 112, 160);">: </span><span style="color: rgb(112, 160, 208); font-style: italic;">%s</span><span style="color: rgb(64, 112, 160);">"</span> <span style="color: rgb(102, 102, 102);">%</span> (function, exception)<br/><br/><span style="color: rgb(85, 85, 85); font-weight: bold;">@sandbox</span><span style="color: rgb(102, 102, 102);">.</span>sandbox(callback, <span style="color: rgb(0, 112, 32);">Exception</span>)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">safe_function</span>(a, b):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> a <span style="color: rgb(102, 102, 102);">/</span> b<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">class</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">SafeObject</span>(<span style="color: rgb(0, 112, 32);">object</span>):<br/>  __metaclass__ <span style="color: rgb(102, 102, 102);">=</span> sandbox<span style="color: rgb(102, 102, 102);">.</span>meta_decorator(sandbox<span style="color: rgb(102, 102, 102);">.</span>sandbox,<br/>      callback, <span style="color: rgb(0, 112, 32);">Exception</span>)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__init__</span>(<span style="color: rgb(0, 112, 32);">self</span>, num):<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>num <span style="color: rgb(102, 102, 102);">=</span> num<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">method</span>(<span style="color: rgb(0, 112, 32);">self</span>, a, b):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''return a / b * self.num'''</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> a <span style="color: rgb(102, 102, 102);">/</span> b <span style="color: rgb(102, 102, 102);">*</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>num<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"safe_function(1, 2) = "</span>, safe_function(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">2</span>)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"SafeObject(10).method(1, 2) = "</span>, SafeObject(<span style="color: rgb(64, 160, 112);">10</span>)<span style="color: rgb(102, 102, 102);">.</span>method(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">2</span>)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"trying safe_function(1, 0)"</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">try</span>:<br/>  safe_function(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">0</span>)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">except</span> <span style="color: rgb(0, 112, 32);">ZeroDivisionError</span>, error:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> error<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"trying SafeObject(10).method(1, 0)"</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">try</span>:<br/>  SafeObject(<span style="color: rgb(64, 160, 112);">10</span>)<span style="color: rgb(102, 102, 102);">.</span>method(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">0</span>)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">except</span> <span style="color: rgb(0, 112, 32);">ZeroDivisionError</span>, error:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> error<br/></pre></div><br/><br/>la salida es:<br/><br/><pre><br/>safe_function(1, 2) =  0<br/>SafeObject(10).method(1, 2) =  0<br/>trying safe_function(1, 0)<br/>exception raised by safe_function: integer division or modulo by zero<br/>trying SafeObject(10).method(1, 0)<br/>exception raised by method: integer division or modulo by zero<br/></pre><br/><br/>la salida es la salida del callback<br/><br/>otra cosa turbia que se puede hacer, es decorar metodos de objetos, no de clases, aca hay un ejemplo:<br/><br/><div class="highlight"><pre>obj <span style="color: rgb(102, 102, 102);">=</span> Object(<span style="color: rgb(64, 160, 112);">10</span>)<br/>sandbox<span style="color: rgb(102, 102, 102);">.</span>decorate_object(obj, sandbox<span style="color: rgb(102, 102, 102);">.</span>sandbox, callback,<br/><span style="color: rgb(0, 112, 32);">ZeroDivisionError</span>)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">print</span> <span style="color: rgb(64, 112, 160);">"trying obj.method(1, 0)"</span><br/>obj<span style="color: rgb(102, 102, 102);">.</span>method(<span style="color: rgb(64, 160, 112);">1</span>, <span style="color: rgb(64, 160, 112);">0</span>)<br/></pre></div><br/><br/>notese que decora el objeto, no es que lo copia y devuelve uno similar o algo asi.<br/><br/>lo que hace es decorar un objeto del tipo Objeto (que no es seguro).<br/>la salida:<br/><br/><pre><br/>trying obj.method(1, 0)<br/>exception raised by method: integer division or modulo by zero<br/></pre><br/><br/>para que sirve todo esto? basicamente para asegurarme de que los plugins que cargo no emitan excepciones, y que si lo hacen, un metodo que yo defina decida que hacer con ese plugin (pararlo, reportar el error, seguir o preguntarle al usuario que desea hacer con el mismo).<br/>Todo esto sin requerir que el usuario escriba una linea extra de codigo (lo cual no suelen hacer de todas formas, mientras el plugin les funcione a ellos :P)<br/><br/>el modulo permite crear metaclases que decoren con cualquier decorador que reciba una cantidad arbitraria de parametros, no solo el decorador de sandobox, lo mismo con decorate_object, por lo que pueden ser usados para decorar cualquier cosa con cualquier decorador.<br/><br/>para los curiosos que quieren ver el codigo, aca esta:<br/><br/><div class="highlight"><pre><span style="color: rgb(0, 112, 32); font-weight: bold;">import</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">types</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">import</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">inspect</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">import</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">functools</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">class</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">sandbox</span>(<span style="color: rgb(0, 112, 32);">object</span>):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''decorator that will catch the exceptions of type</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    exception_type and call the callback passing the function, the</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    exception type and the exception object as parameters'''</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__init__</span>(<span style="color: rgb(0, 112, 32);">self</span>, callback, exception_type<span style="color: rgb(102, 102, 102);">=</span><span style="color: rgb(0, 112, 32);">Exception</span>):<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>callback <span style="color: rgb(102, 102, 102);">=</span> callback<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>exception_type<span style="color: rgb(102, 102, 102);">=</span> exception_type<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__call__</span>(<span style="color: rgb(0, 112, 32);">self</span>, function):<br/><span style="color: rgb(85, 85, 85); font-weight: bold;">@functools</span><span style="color: rgb(102, 102, 102);">.</span>wraps(function)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">wrapper</span>(<span style="color: rgb(102, 102, 102);">*</span>args, <span style="color: rgb(102, 102, 102);">**</span>kwds):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">try</span>:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> function(<span style="color: rgb(102, 102, 102);">*</span>args, <span style="color: rgb(102, 102, 102);">**</span>kwds)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">except</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>exception_type, exception:<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>callback(function, <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>exception_type, exception)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> wrapper<br/><br/><span style="color: rgb(96, 160, 176); font-style: italic;"># wtf?</span><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">meta_decorator</span>(decorator, <span style="color: rgb(102, 102, 102);">*</span>args, <span style="color: rgb(102, 102, 102);">**</span>kwds):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''return a metaclass that used on a class will decorate</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    all the methods of the *class* with the decorator</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    passing args and kwds to the decorator'''</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">class</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">MetaDecorator</span>(<span style="color: rgb(0, 112, 32);">type</span>):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__init__</span>(cls, name, bases, dct):<br/><span style="color: rgb(0, 112, 32);">type</span><span style="color: rgb(102, 102, 102);">.</span>__init__(cls, name, bases, dct)<br/>          methods <span style="color: rgb(102, 102, 102);">=</span> [x <span style="color: rgb(0, 112, 32); font-weight: bold;">for</span> x <span style="color: rgb(0, 112, 32); font-weight: bold;">in</span> dct <span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> <span style="color: rgb(0, 112, 32);">isinstance</span>(dct[x],<br/>              types<span style="color: rgb(102, 102, 102);">.</span>FunctionType)]<br/><br/>          dec <span style="color: rgb(102, 102, 102);">=</span> decorator(<span style="color: rgb(102, 102, 102);">*</span>args, <span style="color: rgb(102, 102, 102);">**</span>kwds)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">for</span> method <span style="color: rgb(0, 112, 32); font-weight: bold;">in</span> methods:<br/><span style="color: rgb(0, 112, 32);">setattr</span>(cls, method, dec(<span style="color: rgb(0, 112, 32);">getattr</span>(cls, method)))<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> MetaDecorator<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">class</span> <span style="color: rgb(14, 132, 181); font-weight: bold;">MethodSandbox</span>(<span style="color: rgb(0, 112, 32);">object</span>):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''wrap a method with the sandbox decorator and return a callable</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    object that is almost identical to the method'''</span><br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__init__</span>(<span style="color: rgb(0, 112, 32);">self</span>, method, callback, exception_type<span style="color: rgb(102, 102, 102);">=</span><span style="color: rgb(0, 112, 32);">Exception</span>):<br/>      functools<span style="color: rgb(102, 102, 102);">.</span>update_wrapper(<span style="color: rgb(0, 112, 32);">self</span>, method)<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>method <span style="color: rgb(102, 102, 102);">=</span> method<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>callback <span style="color: rgb(102, 102, 102);">=</span> callback<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>exception_type <span style="color: rgb(102, 102, 102);">=</span> exception_type<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">__call__</span>(<span style="color: rgb(0, 112, 32);">self</span>, <span style="color: rgb(102, 102, 102);">*</span>args, <span style="color: rgb(102, 102, 102);">**</span>kwds):<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">try</span>:<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">return</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>method(<span style="color: rgb(102, 102, 102);">*</span>args, <span style="color: rgb(102, 102, 102);">**</span>kwds)<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">except</span> <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>exception_type, exception:<br/><span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>callback(<span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>method, <span style="color: rgb(0, 112, 32);">self</span><span style="color: rgb(102, 102, 102);">.</span>exception_type, exception)<br/><br/><span style="color: rgb(0, 112, 32); font-weight: bold;">def</span> <span style="color: rgb(6, 40, 126);">decorate_object</span>(obj, decorator, <span style="color: rgb(102, 102, 102);">*</span>args, <span style="color: rgb(102, 102, 102);">**</span>kwds):<br/><span style="color: rgb(64, 112, 160); font-style: italic;">'''wrap all the obj methods with the sandbox decorator, </span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    and calling the callback parameter when an exception is raised</span><br/><span style="color: rgb(64, 112, 160); font-style: italic;">    it decorates all the methods on an *object*'''</span><br/>  dec <span style="color: rgb(102, 102, 102);">=</span> decorator(<span style="color: rgb(102, 102, 102);">*</span>args, <span style="color: rgb(102, 102, 102);">**</span>kwds)<br/><br/>  [<span style="color: rgb(0, 112, 32);">setattr</span>(obj, method, dec(<span style="color: rgb(0, 112, 32);">getattr</span>(obj, method)))\<br/><span style="color: rgb(0, 112, 32); font-weight: bold;">for</span> method <span style="color: rgb(0, 112, 32); font-weight: bold;">in</span> <span style="color: rgb(0, 112, 32);">dir</span>(obj) <span style="color: rgb(0, 112, 32); font-weight: bold;">if</span> inspect<span style="color: rgb(102, 102, 102);">.</span>ismethod(<span style="color: rgb(0, 112, 32);">getattr</span>(obj, method))]<br/></pre></div>
<div style="clear: both;"/>
